// function generateOtp(){
//     return Math.floor(100000 + Math.random() * 900000).toString();
// }

// async function sendEmail(email,otp){
//     try {
//         const transporter= nodemailer.createTransport({
//             service:"gmail",
//             port:587,
//             secure:false,
//             requireTLS:true,
//             auth:{
//                 user:process.env.NODEMAILER_EMAIL,
//                 pass:process.env.NODEMAILER_PASSWORD
//             }
//         })

//         const info= await transporter.sendMail({
//             from: process.env.NODEMAILER_EMAIL,
//             to: email,
//             subject: "EPICREADS, VERIFY YOUR EMAIL",
//             text: Your OTP is ${otp},
//             html: <b>Your OTP is ${otp}</b>
//         })

//         return info.accepted.length>0

//     } catch (error) {
//         console.error(error.message+error sending email);
//         res.status(500).send("Server error");
//         return false;
//     }
// }

// const register = async(req,res)=>{ 
//     try {
//         console.log(req.body);
        
//         const {name, email, mobile, password} = req.body;
        

//         const findUser = await User.findOne({email});
//         if(findUser){
//             return res.render("homepage",{message:"User with this email already exists"})
//         }

//         const otp= generateOtp();
//         const emailSent = await sendEmail(email,otp);
//         if(!emailSent){
//             return res.json("email not sent")
//         }

//         req.session.userOtp = otp;
//         req.session.userData = {name, mobile, email, password}
//         res.render("otpVerification");
//         console.log("Otp sent",otp);

//     } catch (error) {
//         console.error(error.message+" error in register");
//         res.status(500).send("Server error");
//     }
// }

// const securePassword = async(password)=>{
//     try {
//         const passwordHash= await bcrypt.hash(password,10);
//         return passwordHash;
//     } catch (error) {
//         console.error(error.message+" error in securePassword");
//         res.status(500).send("Server error");
//     }
// }


// const verifyOtp = async(req,res)=>{
//     try {
//         const {otp} = req.body;
//         console.log('req',req.body);

//         console.log(otp);

//         if(otp === req.session.userOtp){
//             const user = req.session.userData
//             console.log('user',user);

//             const passwordHash= await securePassword(user.password);
//             const saveUserData = new User({
//                 name: user.name,
//                 email: user.email,
//                 mobile: user.mobile,
//                 password: passwordHash,
//             })
//             await saveUserData.save();
//             req.session.user = saveUserData._id;
//             console.log(saveUserData);
            
//             res.json({success:true, redirectUrl:"/"})
//         }else{
//             res.status(400).json({success:false, message:"Invalid OTP. Please try again"})
//         }
//      }catch (error) {
//         console.error(error.message+" error in verifyOtp");
//         res.status(500).send("Server error");
//     }
// }

// const resendOtp = async(req,res)=>{
//     try {
//         if(!req.session.userData){
//             return res.status(400).json({ success: false, message: "Session data not found" });
//         }
//         const {email} = req.session.userData;
//         if(!email){
//             return res.status(400).json({success:false, message:"Email not found"})
//         }        

//         const otp = generateOtp();
//         req.session.userOtp = otp;

//         const emailSent = await sendEmail(email,otp);
//         if(emailSent){
//             console.log("Resent OTP:",otp);
//             res.status(200).json({success:true,message:"OTP Resend Successfully"})
//         }else{
//             res.status(500).json({success:false,message:"Failed to resend OTP. Please try again later"})
//         }
//     } catch (error) {
//         console.error(error.message+" error in resendOtp");
//         res.status(500).send("Server error");
//     }
// }
// verify otp 
// const verifyOtp = async (req, res) => {
//   console.log('verifying otp');
//   try {
    
//     const {otp } = req.body;
//     console.log('req.body:', req.body);


//     if(otp === req.session.userOtp){
//       const user = req.session.userData
//       console.log('user',user);

//       // console.log('Session password:', password);

      

//       console.log('1');

//       const passwordHash  = await securePassword(user.password);
      
//             console.log('2');

//       const saveUserData = new User({
//         name: user.name,
//         email: user.email,
//         password: passwordHash,
//       });

//       console.log('3');

//       await saveUserData.save();
//       req.session.user = saveUserData._id;
//       console.log(saveUserData);
//       res.json({ success: true, redirectUrl: '/home' });

//     } else {
//       res.status(400).json({ success: false, message: "Invalid OTP, Please try again" });
//     }
//     console.log('6');
//   } catch (error) {
//     console.error('Error Verifying OTP', error);
//     res.status(500).json({ success: false, message: 'An error occurred' });
//   }
// };

// const verifyOtp = async(req,res)=>{
//   try {
//       const {otp} = req.body;
//       console.log('req',req.body);

//       console.log(otp);

//       if(otp === req.session.userOtp){
//           const user = req.session.userData
//           console.log('user',user);

//           const passwordHash= await securePassword(user.password);
//           const saveUserData = new User({
//               name: user.name,
//               email: user.email,
//               mobile: user.mobile,
//               password: passwordHash,
//           })
//           await saveUserData.save();
//           req.session.user = saveUserData._id;
//           console.log(saveUserData);
          
//           res.json({success:true, redirectUrl:"/"})
//       }else{
//           res.status(400).json({success:false, message:"Invalid OTP. Please try again"})
//       }
//    }catch (error) {
//       console.log(error + " error in verifyOtp");
//       res.status(500).send("Server error");
//   }
// }

// const verifyOtp = async(req,res)=>{
//   try {
//       const {otp} = req.body;
//       console.log('req',req.body);

//       console.log(otp);

//       // Check if userData exists in session
//       if(!req.session.userData){
//           return res.status(400).json({success:false, message:"User data not found in session"});
//       }

//       const user = req.session.userData;
//       console.log('user',user);

//       // Check if otp matches the session otp
//       if(otp === req.session.userOtp){
//           // Ensure password exists in userData
//           if(!user.password){
//               return res.status(400).json({success:false, message:"Password missing in session data"});
//           }

//           const passwordHash= await securePassword(user.password);
//           const saveUserData = new User({
//               name: user.name,
//               email: user.email,
//               mobile: user.mobile,
//               password: passwordHash,
//           });
//           await saveUserData.save();
//           req.session.user = saveUserData._id; // Assuming you want to store the user ID in the session after successful registration
//           console.log(saveUserData);
          
//           res.json({success:true, redirectUrl:"/"});
//       }else{
//           res.status(400).json({success:false, message:"Invalid OTP. Please try again"});
//       }
//    }catch (error) {
//       console.error(error.message+" error in verifyOtp");
//       res.status(500).send("Server error");
//   }
// };

// const verifyOtp = async (req, res) => {
//   const { otp } = req.body;
//   const userData = req.session.userData;

//   if (!userData || !otp) {
//     return res.status(400).json({ success: false, message: "Missing user data or OTP." });
//   }

//   // Assuming otp is stored in session.userData for simplicity
//   if (otp !== userData.otp) {
//     return res.status(400).json({ success: false, message: "Invalid OTP." });
//   }

//   // Hash password before saving
//   const hashedPassword = await securePassword(userData.password);

//   // Create new user with hashed password
//   const newUser = new User({
//     name: userData.name,
//     email: userData.email,
//     password: hashedPassword,
//     // otp field is not needed anymore, remove it or let Mongoose handle it
//   });

//   await newUser.save();

//   req.session.destroy(); // Clear session data after successful registration

//   res.json({ success: true, message: "Registration successful." });
// };





// og
// secure password
// const securePassword = async (password) => {
//   try {
//     const passwordHash = await bcrypt.hash(password, 10);
//     return passwordHash;
//   } catch (error) {
//     console.error(error.message + " error in securePassword");
//     throw new Error("Server error in password hashing");
//   }
// };

const securePassword = async (password) => {
    try {
        const passwordHash = await bcrypt.hash(password, 10); // Hash the password
        return passwordHash; // Return the hashed password
    } catch (error) {
        console.error(error.message + " error in securePassword");
        // Instead of sending a response, throw an error and handle it where you call this function
        throw new Error("Error in securing password");
    }
  };
    
  
  
  // verify otp 
  
  const verifyOtp = async (req,res)=>{
    
  try {
    const { otp }= req.body;
  
    console.log(otp);
  
    if(otp === req.session.userOtp){
      // const user = req.session.userData
      // console.log(passwordHash);
      const hashedpass = await securePassword(req.session.userData.password);
      console.log(hashedpass);
  
  
      const saveUserData = new User ({
        name:req.session.userSession.name,
        email:req.session.userSession.email,
        // mobile: req.session.userSession.email,
        password:hashedpass,
      })
  
     await saveUserData.save();
  
     req.session.user = saveUserData._id;
  
     res.json({success:true,redirectUrl:'/homepage'});
    
    }else{
      res.status(400).json({success:false,message:"Invalid OTP ,try again"})
    }
    
  } catch (error) {
      console.error('Error Verfiifying OTO',error);
     res.status(500).json({success:false,message:'An error occured'})
  
  }
  }


