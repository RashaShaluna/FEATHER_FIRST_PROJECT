<%- include('../adminlayouts/header') %>

<style>
  input[type="text"],
  input[type="number"],
  textarea {
    width: 75%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-sizing: border-box;
  }

  .main-panel {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  .content-wrapper {
    flex: 1;
  }

  .back-button {
    color: white;
    background-color: #1cc0a0;
    border: none;
    padding: 10px 20px;
    text-decoration: none;
    border-radius: 5px;
  }

  .back-button:hover {
    background-color: white;
    color: #1cc0a0;
    border: 1px solid #1cc0a0;
  }

  .sub-btn {
    color: white;
    background-color: #1cc0a0;
    border: none;
    border-radius: 5px;
    padding: 10px 20px;
  }

  .sub-btn:hover {
    background-color: white;
    color: #1cc0a0;
    border: 1px solid #1cc0a0;
  }

  .header-flex {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .form-section {
    margin-bottom: 20px;
  }

  .form-label {
    margin-bottom: 10px;
  }

  input[type="file"] {
    width: 400px;
    padding: 15px;
    font-size: 12px;
    border-radius: 5px;
    border: 1px solid #ccc;
    background-color: #fdfcfc;
  }

  input[type="file"]::-webkit-file-upload-button {
    padding: 5px;
    font-size: 12px;
  }

  .error-message {
    color: red;
    font-size: 12px;
  }

  .image-cropper {
    display: none;
    flex-direction: column;
    align-items: center;
  }

  .cropped-img-container {
    width: 200px;
    height: 200px;
    background-color: #f8f9fa;
    margin-bottom: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
  }

  .cropped-img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
  }

  .modal-content {
    background: #faf9f9;
    padding: 20px;
    border-radius: 5px;
    width: 90%;
    max-width: 600px;
    max-height: 80%;
    overflow: hidden;
    position: relative;
    margin: auto;
  }

  #image {
    max-width: 100%;
    max-height: 80vh;
    display: block;
  }

  @media (max-width: 768px) {
    .modal-content {
      width: 95%;
      max-width: 90%;
      padding: 15px;
    }

    #image {
      max-height: 50vh;
    }
  }

  @media (max-width: 480px) {
    .modal-content {
      width: 100%;
      max-width: 100%;
      padding: 10px;
      border-radius: 0;
    }

    #image {
      max-height: 200px;
    }
  }

  .image-container {
    position: relative;
    display: inline-block;
  }
</style>

<body>
  <div class="main-panel">
    <div class="content-wrapper">
      <div class="col-lg-12 grid-margin stretch-card">
        <div class="card">
          <div class="card-body">
            <div class="mb-3 d-flex justify-content-between">
              <h3 class="card-title fs-5 mb-0">Edit Product</h3>
              <a href="/admin/product" class="back-button btn btn-primary float-right">Back to Product</a>
            </div>

            <% if (product) { %>
              <form id="editproductForm" method="POST" action="/admin/editproduct/<%= product._id %>" enctype="multipart/form-data">
                <div class="row form-section">
                  <div class="col-lg-6 mb-4">
                    <label for="product_name" class="form-label">Product Name</label>
                    <input type="text" placeholder="Type here" name="name" class="form-control border" id="product_name" value="<%= product.name %>">
                    <div id="productName-error" class="error-message" style="display:none;"></div>
                  </div>

                  <div class="col-lg-4 mb-4">
                    <div class="col-lg-6 mb-4">
                      <label class="form-label">Category</label>
                      <select class="form-select border" style="width: 350px;" name="categoryId" id="category">
                        <% for (let i = 0; i <category .length; i++) { %>
                            <option value="<%=category [i]._id %>" <%= product.category.toString() ===category [i]._id.toString() ? 'selected' : '' %>>
                                <%=category [i].name %>
                            </option>
                        <% } %>
                    </select>
                      
                      <div id="category-error" class="error-message"></div>
                    </div>
                  </div>

                  <div class="row form-section">
                  
      
                    <div class="col-lg-4 mb-4">
                      <label class="form-label"> Sales Price</label>
                      <input placeholder="â‚¹" name="salesPrice" type="text" class="form-control border" value="<%= product.salesPrice %>">
                      <div id="salesPrice-error"  class="error-message"></div>
                    </div>
                    
                    <div class="col-lg-4 mb-4">
                      <label class="form-label">Offer percentage</label>
                      <input  id="offerPercentage" name="offerPercentage" type="text" class="form-control border" value="<%= product.offerPercentage %>">
                      <div id="offerPercentage-error" class="error-message"></div>
                    </div>
                  </div>
                  <div class="col-lg-4 mb-4">
                    <label class="form-label">Offer Start Date</label>
                    <input type="date" name="offerStartDate" class="form-control border" value="<%= product.offerStartDate ? product.offerStartDate.toISOString().split('T')[0] : '' %>">
                    <div id="offerStartDate-error" class="error-message"></div>
                </div>
                <div class="col-lg-4 mb-4">
                    <label class="form-label">Offer End Date</label>
                    <input type="date" name="offerEndDate" class="form-control border" value="<%= product.offerEndDate ? product.offerEndDate.toISOString().split('T')[0] : '' %>">
                    <div id="offerEndDate-error" class="error-message"></div>
                </div>
    

                  <div class="row form-section">
                    <label class="form-label">Full Description</label>
                    <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border w-50" rows="4"><%= product.description %></textarea>
                    <div id="description-error" class="error-message" style="display:none;"></div>
                  </div>

                  <div class="row form-section">
                    <div class="col-lg-6 mb-4">
                      <label class="form-label">Color</label>
                      <input placeholder="Product Color" name="color" type="text" class="form-control border w-50" id="color" value="<%= product.color %>">
                      <div id="color-error" class="error-message"></div>
                    </div>
                    <div class="col-lg-4 mb-4">
                      <label class="form-label">Quantity</label>
                      <input placeholder="Product Quantity" name="quantity" type="number" class="form-control border " id="quantity" value="<%= product.quantity %>">
                      <div id="quantity-error" class="error-message"></div>
                    </div>
                  </div>

                
                  <div class="card mb-2"></div>
                    <div class="card-header">
                      <h4>Images</h4>
                    </div>
                    <div class="card-body">
                      
                      <% const images = product.images || []; %>
                      <% for (let i = 0; i < 3; i++) { %>
                        <div class="col-12 col-md-6 mb-3">
                          <div class="card-body">
                            <label for="input<%= i + 1 %>">Upload Image <%= i + 1 %>:</label>
                            <div class="text-center">
                              <!-- Display existing image preview -->
                              <img src="" id="imgView<%= i + 1 %>" class="img-fluid mb-2">
                            </div>
                            <!-- File input for uploading new images -->
                            <input class="form-control" type="file" id="input<%= i + 1 %>" name="image<%= i + 1 %>" accept="image/png, image/jpeg, image/jpg">
                            <div id="images-error<%= i + 1 %>" class="error-message mt-2"></div>
                          </div>
                          <!-- Image Cropper and Delete Buttons -->
                          <div class="image-cropper d-flex flex-column align-items-center">
                            <div id="croppedImgContainer<%= i + 1 %>" class="cropped-img-container">
                              <!-- Show cropped image if exists -->
                              <img src="/uploads/<%= images[i] || '' %>" id="croppedImg<%= i + 1 %>" alt="Cropped Image" class="cropped-img img-fluid">
                            </div>
                            <button type="button" id="saveButton<%= i + 1 %>" class="btn btn-sm btn-primary" style="display: none;">Crop</button>
                            <button type="button" id="deleteButton<%= i %>" class="btn btn-sm btn-danger delete-button" data-image-path="/uploads/<%= images[i] || '' %>"  data-product-id="<%= product._id %>">Delete</button>
                          </div>
                        </div>
                      <% } %>
                      

                      <div class="form-section">
                        <% if (typeof message !== 'undefined' && message) { %>
                          <div class="alert alert-info msg text-center ">
                              <%= message %>
                          </div>
                      <% } %>
                        <button class="btn btn-md rounded sub-btn"  id="pulish"  type="submit">Submit Product</button>
                      </div>

      </form>
      <% } %>
      </div>
      </div>
</div>
</div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    
    <script>
      document.addEventListener("DOMContentLoaded", function() {
        event.preventDefault();     
        const croppers = [];

      
        function validateForm() {
          let isValid = true;
      
          document.querySelectorAll('.error-message').forEach(el => el.style.display = 'none');
      
          // Validate Product Name
          var productName = document.getElementById('product_name').value.trim();
          if (productName === '') {
            document.getElementById('productName-error').textContent = 'Product name is required.';
            document.getElementById('productName-error').style.display = 'block';
            isValid = false;
          }
      
          // Validate Category
          const category = document.getElementById('category').value.trim();
          if (category === '') {
            document.getElementById('category-error').textContent = 'Category is required.';
            document.getElementById('category-error').style.display = 'block';
            isValid = false;
          }
      
      //  // Validate Offer Percentage 
        const offerPercentage = document.getElementById('offerPercentage').value.trim();
        if (offerPercentage !== '' && (isNaN(offerPercentage) || parseFloat(offerPercentage) < 0 || parseFloat(offerPercentage) > 1000)) {
          document.getElementById('offerPercentage-error').textContent = 'Offer percentage must be between 0 and 1000.';
          document.getElementById('offerPercentage-error').style.display = 'block';
          isValid = false;
        } else {
          document.getElementById('offerPercentage-error').style.display = 'none';
        }

      
          // Validate Sale Price
          const salesPrice = document.querySelector('input[name="salesPrice"]').value.trim();
          if (salesPrice === '' || isNaN(salesPrice) || parseFloat(salesPrice) < 0) {
            document.getElementById('salesPrice-error').textContent = 'sales price is required.';
            document.getElementById('salesPrice-error').style.display = 'block';
            isValid = false;
          }
     
          // Validate Quantity
          const quantity = document.getElementById('quantity').value.trim();
          if (quantity === '' || isNaN(quantity) || parseInt(quantity) <= 0) {
            document.getElementById('quantity-error').textContent = 'Quantity is required.';
            document.getElementById('quantity-error').style.display = 'block';
            isValid = false;
          }
      
          // Validate Description
          const description = document.getElementById('descriptionid').value.trim();
          if (description === '') {
            document.getElementById('description-error').textContent = 'Description is required.';
            document.getElementById('description-error').style.display = 'block';
            isValid = false;
          }
      
          // Validate Color
          const color = document.getElementById('color').value.trim();
          if (color === '') {
            document.getElementById('color-error').textContent = 'Color is required.';
            document.getElementById('color-error').style.display = 'block';
            isValid = false;
          }
      
        // Validate Images
      
        // const imageInputs = document.querySelectorAll('input[type="file"][name="images"]');
        //   let imageValid = false;
        //   imageInputs.forEach(input => {
        //     if (input.files.length > 0) {
        //       imageValid = true;
        //     }
        //   });
        //   if (!imageValid) {
        //     document.getElementById('images-error').textContent = 'Image is required';
        //     document.getElementById('images-error').style.display = 'block';
        //     isValid = false;
        //   }

     return isValid;

        }
      
function handleImageUpload(inputId, imgViewId, croppedImgId, saveButtonId, cropperIndex) {
  const inputElement = document.getElementById(inputId);
  const imgView = document.getElementById(imgViewId);
  const croppedImg = document.getElementById(croppedImgId);
  const saveButton = document.getElementById(saveButtonId);
  const cropperContainer = document.getElementById('croppedImgContainer' + (cropperIndex + 1));

  inputElement.addEventListener("change", function(event) {
    const files = event.target.files;
    if (files && files.length > 0) {
      const reader = new FileReader();
      reader.onload = function(e) {
        imgView.src = e.target.result;
        imgView.style.display = "block";

        if (croppers[cropperIndex]) {
          croppers[cropperIndex].destroy();
        }

        // Initialize the Cropper
        croppers[cropperIndex] = new Cropper(imgView, {
          aspectRatio: 1,
          viewMode: 2,
          preview: '.cropped-img-container img',
          autoCropArea: 1,
          movable: true,
          scalable: true,
          zoomable: true,
          rotatable: true,
          cropBoxResizable: true,
          minCropBoxWidth: 200,
          minCropBoxHeight: 200
        });
        saveButton.style.display = "inline-block";
        cropperContainer.style.display = "flex";
      };
      reader.readAsDataURL(files[0]);
    }
  });

  saveButton.addEventListener("click", async function() {
    if (croppers[cropperIndex]) {
      const croppedCanvas = croppers[cropperIndex].getCroppedCanvas();
      const croppedImageURL = croppedCanvas.toDataURL('image/png');  
      croppedImg.src = croppedImageURL;
      croppedImg.style.display = "block";

      const blob = await new Promise((resolve) => {
        croppedCanvas.toBlob((blob) => {
          console.log('Blob created:', blob);
          resolve(blob);
        }, 'image/png');
      });

      const file = new File([blob], `cropped-image-${cropperIndex}.png`, { type: 'image/png' });
      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(file);
      inputElement.files = dataTransfer.files;

     

      croppers[cropperIndex].destroy();
      croppers[cropperIndex] = null;
      imgView.style.display = "none";
      saveButton.style.display = "none";
    }
  });
}

        
handleImageUpload('input1', 'imgView1', 'croppedImg1', 'saveButton1', 1);
handleImageUpload('input2', 'imgView2', 'croppedImg2', 'saveButton2', 2);
handleImageUpload('input3', 'imgView3', 'croppedImg3', 'saveButton3', 3);



document.getElementById('editproductForm').addEventListener('submit', function(event) {
  event.preventDefault();
  
  const productName = document.getElementById('product_name').value.trim();
  const categoryId = document.getElementById('category').value;  

 
  if (validateForm()) {
      const formData = new FormData();
    formData.append('name', productName);
    formData.append('categoryId', categoryId);
    // croppedImages.forEach((image, index) => {
    //     formData.append('files', image);
    // });    
      const productId = '<%= product._id %>'; 

      fetch(`/admin/ediproduct/${productId}`, {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
      
        console.log('Success:', data);

        Swal.fire({
          icon: 'success',
          title: 'Product Added',
          text: 'The product was edited successfully!',
          confirmButtonText: 'OK'
        }).then(()=>{
          window.location.href = '/admin/product';
          })

      })
      .catch(error => {
        console.error('Error:', error);

        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Something went wrong!',
          confirmButtonText: 'OK'
        });
      });
    }
  });

// Delete button functionality
  const deleteButtons = document.querySelectorAll('.delete-button');
  
  deleteButtons.forEach(button => {
    button.addEventListener('click', function () {
      const imagePath = button.dataset.imagePath;
      const productId = button.dataset.productId; 

      Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch('/admin/delete-image', {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ imagePath: imagePath, productId: productId })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              const croppedImgContainer = button.closest('.image-cropper').querySelector('.cropped-img-container');
              const croppedImg = croppedImgContainer.querySelector('img');

              if (croppedImg) {
                croppedImg.src = ''; 
                croppedImg.style.display = 'none';
              }

              button.style.display = 'none'; 
              Swal.fire(
                'Deleted!',
                'Your image has been deleted.',
                'success'
              );
            } else {
              Swal.fire(
                'Error!',
                'Failed to delete image: ' + data.message,
                'error'
              );
            }
          })
          .catch(error => {
            console.error('Error deleting image:', error);
            Swal.fire(
              'Error!',
              'An error occurred while deleting the image.',
              'error'
            );
          });
        }
      });
    });
  });
});



</script>








    </div>
    
    </body>