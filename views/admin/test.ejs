<tbody>

<!-- <% roducts.forEach?.((product, index) => { %>
<tr>
<td><%= index + 1 %></td>
<td><%= product.name %></td>
<td><%= product.category?.name %></td>
<td>₹<%= product.price %></td>
<!-- <td><%= product.description %></td> -->
<td>₹<%= product.offerPrice %></td>
<td><%= product.quantity %></td>
<td> -->
<% product.image.forEach((image) => { %>
<img src="/uploads/<%= image %>" style="width: 50px; height: 50px;">
<% }); %>
</td>


<td>

<!-- product edit option -->
<a href="/admin/editProduct/<%= product._id %>" class="btn btn-primary">Edit</a>



<!-- product delete option -->
<!-- <form action="/admin/products/<%= product._id %>/delete" method="post" style="display: inline;">
<button type="submit" class="btn btn-danger">Delete</button>
</form> -->


<!-- product lit and unlist option -->
<% if (product.status === false) { %>
<button class="btn btn-success" onclick="toggleProductStatus('<%= product._id %>')">List</button>
<% } else { %>
<button class="btn btn-danger" onclick="toggleProductStatus('<%= product._id %>')">Unlist</button>
<% } %>



<!-- <form id="toggleForm_<%= product._id %>" action="/admin/product/<%= product._id %>/toggle" method="post" style="display: inline;">
<% if(product.listed){ %>
<button id="toggleButton_<%= product._id %>"  type="button" onclick="submitForm('<%= product._id %>','<%= product.listed %>','<%= index %>')"  class="btn btn-warning" data-toggle="modal" data-target="#confirmationModal">
<%= product.listed ? 'Unlist' : 'List' %>
</button>
<%}else{%>
<button id="toggleButton_<%= product._id %>"  type="button" onclick="submitForm('<%= product._id %>','<%= product.listed %>','<%= index %>')"  class="btn btn-success" data-toggle="modal" data-target="#confirmationModal">
<%= product.listed ? 'Unlist' : 'List' %>
</button>
<% } %>
<input type="hidden" name="_method" value="PUT">
<input type="hidden" name="listed" value="<%= !product.listed %>">
</form> -->


</td>
</tr>
<% }); %>

</tbody>
<div class="pagination" style="margin-left: 30%;">
<% if (currentPage > 1) { %>
<a class="pagination-link" href="?page=<%= currentPage - 1 %>">Previous</a>
<% } %>

<% for (let j = 1; j <= totalPages; j++) { %>
<a class="pagination-link <%= j === currentPage ? 'active' : '' %>" href="?page=<%= j %>"><%= j %></a>
<% } %>

<% if (currentPage < totalPages) { %>
<a class="pagination-link" href="?page=<%= currentPage + 1 %>">Next</a>
<% } %>
</div>


<%- include("../../views/partials/admin/header") %>
<head>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<style>
.error-message{
color: red;
}


.thumbnails-container {
display: flex;
overflow-x: auto;
}


.thumbnail {
margin-right: 10px;


}
</style>


<section class="content-main">
<div class="row">
<div class="col-9">
<div class="content-header">
<h2 class="content-title">Add New Product</h2>
</div>
</div>
<div class="col-lg-6">
<div class="card mb-4">
<div class="card-body">
<form method="" action="" enctype=""
onsubmit="return validateForm()
">
<div class="mb-4">
<label for="product_name" class="form-label">Product Name</label>
<input type="text" placeholder="Type here" name="productName"
class="form-control border" id="product_name">
<div id="productName-error" class="error-message"></div>
</div>
<div class="col-lg-4 mb-4">
<label class="form-label">Brand</label>
<select class="form-select border" name="brand">


<option value="">




</option>


</select>
<div id="brand-error" class="error-message"></div>
</div>
<div class="mb-4">
<label class="form-label">Full description</label>
<textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border"
rows="4"></textarea>
<div id="description-error" class="error-message"></div>
</div>
<div class="row">
<div class="col-lg-4">
<div class="mb-4">
<label class="form-label">Regular price</label>
<input placeholder="$" name="regularPrice" type="text"
class="form-control border">
<div id="regularPrice-error" class="error-message"></div>
</div>
</div>
<div class="col-lg-4">
<div class="mb-4">
<label class="form-label">Sale price</label>
<input placeholder="$" name="salePrice" type="text" class="form-control border">

</div>
<div id="salePrice-error" class="error-message"></div>
</div>
<div class="col-lg-4">
<div class="mb-4">
<label class="form-label">Quantity</label>
<input placeholder="" name="quantity" type="text" class="form-control border">
<div id="quantity-error" class="error-message"></div>
</div>
</div>
</div>
<div class="row">

<div class="col-lg-4">
<div class="mb-4">
<label class="form-label">Color</label>
<input  name="color" type="text" class="form-control border">
</div>
<div id="color-error" class="error-message"></div>
</div>

</div>
<div class="card mb-4">
<div class="card-body">
<div class="row gx-2">
<div class="col-sm-6 mb-3">
<label class="form-label">Category</label>
<select class="form-select border" style="width: 150px;" name="category">




<option value="">
    
</option>



</select>
<div id="category-error" class="error-message"></div>
</div>
</div>
</div>
</div>
<div class="card mb-2">
<div class="card-header">
<h4>Choose images</h4>
</div>
<div class="border row">
<div id="addedImagesContainer" class="thumbnails-container"></div>
</div>
<div class="row">
<div class="card-body align-items-center" style="margin-bottom: 20px;">
<img src="" alt="" id="imgView1">
                <input class="form-control" type="file" name="images" id="input1"
                    accept="image/png, image/jpeg, image/jpg"
                    onchange="viewImage1(event), viewImage(event, 1)">
                    <div id="images-error" class="error-message"></div>
            </div>
            <div class="image-cropper d-flex align-items-center"
                style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                <img src="" id="croppedImg1" alt="">
                <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
            </div>
        </div>
        
        <div class="row">
            <div class="card-body align-items-center" style="margin-bottom: 20px;">
                <img src="" alt="" id="imgView2">


                <input class="form-control" type="file" name="images" id="input2"
                    accept="image/png, image/jpeg, image/jpg"
                    onchange="viewImage2(event),viewImage(event, 2)">
            </div>
            <div class="image-cropper d-flex align-items-center"
                style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                <img src="" id="croppedImg2" alt="">
                <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
            </div>
        </div>
        
        <div class="row">
            <div class="card-body align-items-center" style="margin-bottom: 20px;">
                <img src="" alt="" id="imgView3">


                <input class="form-control" type="file" name="images" id="input3"
                    accept="image/png, image/jpeg, image/jpg"
                    onchange="viewImage3(event),viewImage(event, 3)">
            </div>
            <div class="image-cropper d-flex align-items-center"
                style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                <img src="" id="croppedImg3" alt="">
                <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
            </div>
        </div>
        
        <div class="row">
            <div class="card-body align-items-center" style="margin-bottom: 20px;">
                <img src="" alt="" id="imgView4">


        
                <input class="form-control" type="file" name="images" id="input4"
                    accept="image/png, image/jpeg, image/jpg"
                    onchange="viewImage4(event),viewImage(event, 4)">
            </div>
            <div class="image-cropper d-flex align-items-center"
                style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                <img src="" id="croppedImg4" alt="">
                <button type="button" id="saveButton4" class="btn-sm btn-primary">Save</button>
            </div>
        </div>

    </div>
</div>
<div>
<button class="btn btn-md rounded font-sm hover-up"  type="button" onclick="validateAndSubmit()
">Publish</button>
</div>
</form>
</div>
</div>
</div>
</div>
</section>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

<%- include("../../views/partials/admin/footer") %>
<script>
function validateAndSubmit(){
    if(validateForm()){
      document.forms(0).submit();
    }
  }
  
  function  viewImage1(event){
    document.getElementById('image1').src= URL.createObjectURL(event.target.files[0])
  }
  function  viewImage2(event){
    document.getElementById('image2').src= URL.createObjectURL(event.target.files[0])
  }
  function  viewImage3(event){
    document.getElementById('image3').src= URL.createObjectURL(event.target.files[0])
  }
  function  viewImage4(event){
    document.getElementById('image4').src= URL.createObjectURL(event.target.files[0])
  }
  
  function viewImage(event,index){
    let input = event.target;
    let reader = new FileReader();
    reader.onload = function (){
      let dataURL = reader.result;
      let image = document.getElementById('imageView'+index);
      image.src = dataURL;
      let cropper = new Copper(image,{
       aspectRatio:1,
       viewMode:1,
       guides:true,
       background:false,
       autoCropArea:1,
       zoomable:true
      });
  
          let  cropperContainer = document.querySelector('#croppedImg'+index).parentNode;
           cropperContainer.style.display='block';
  
           let saveButton = document.querySelector('#saveButton'+index);
           saveButton.addEventListener('click',async function () {
            
            let cropperCanvas = cropper.getCroppedCanvas();
            let croppedImage = document.getElementById('croppedImg'+index);
            croppedImage.src = cropperCanvas.toDataURL('image/jpeg',1.0);
  
            let timestamp = new Date().getTime();
            let fileName = `cropped-img${timestamp}-${index}.png`;
  
            await cropperCanvas.toBloob(blob=>{
              let input = document.getElementById('input'+index)
              let imgFile = new File({blob}.fileName.blob)
              const fileList = new DataTransfer();
              fileList.items.add(imgFile);
              input.files = fileList.files
            });
  
            cropperContainer.style.display = 'none';
            cropper.destroy()
           });
     };
     reader.readersDataURL(input.files[0]);
  }
  
  
        const selectedImages = {};
        document.getElementById('input1').addEventListener('change',handleFileSelect);
  
        function handleFileSelect(event){
          const addedImagesContainer = document.getElementById('addedImagesContainer');
          addedImagesContainer.innerHTML = '';
          const files = event.target.files;
           for(let i=0;i<files.length;i++){
              const file = files[i];
              selectedImages.push(file);
              const thumbnail = document.createElement('div');
              thumbnail.classList.add('thumbnail');
  
              const img = document.createElement('img');
              img.src = URL.createObjectURL(file);
              img.alt = 'thumbnail';
              img.style.width = '50px';
              img.style.height = 'auto';
              const remoneIcon = document.createElement('span');
              remoneIcon.classList.add('remove icon');
              remveIcon.innerHTML = '4times:';
              remoneIcon.addEventListener('click',function(){
                const index = selectedImages.index(file);
                if(index !== -1){
                  selectedImages.splice(index,1)
                }
                thumbnail.remove();
              });
              thumbnail.appendChild(img);
              thumbnail.appendChild(remoneIcon);
              addedImagesContainer.appendChild(thumbnail);
           }
        }
    </script>


     <!-- <div class="row">
                <div class="col-12 col-md-6 mb-3">
                  <div class="card-body">
                    <label for="input1">Upload Image 1:</label>
                    <div class="text-center">
                      <img src="" alt="Preview" id="imgView1" class="img-fluid mb-2">
                    </div>
                    <input class="form-control" type="file" name="images" id="input1" accept="image/png, image/jpeg, image/jpg">
                    <div id="images-error1" class="error-message mt-2"></div>
                  </div>
                  <div class="image-cropper d-flex justify-content-center align-items-center cropped-img-container"
                       style="display:none; width: 200px; height: 200px; margin-bottom: 20px; background-color: #1cc0a0;">
                    <img src="" id="croppedImg1" alt="Cropped Image" class="cropped-img">
                    <button type="button" id="saveButton1" class="btn btn-sm btn-primary ms-2 ">Save</button>

                  </div>
                <!-- </div> -->

                
               <div class="row"> 
                <div class="col-12 col-md-6 mb-3">
                  <div class="card-body">
                    <label for="input1">Upload Image 1:</label>
                    <input class="form-control" type="file" name="images" id="input1" accept="image/png, image/jpeg, image/jpg">
                    <div id="images-error1" class="error-message mt-2"></div>
                  </div>
                  <!-- Image Cropper -->
                  <div class="image-cropper d-flex flex-column align-items-center">
                    <div class="cropped-img-container"
                         style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
                      <img src="" id="croppedImg1" alt="Cropped Image" class="cropped-img img-fluid" style="max-width: 100%; max-height: 100%;">
                    </div>
                    <button type="button" id="saveButton1" class="btn btn-sm btn-primary">Save</button>
                  </div>
                </div>
              </div>


              <div class="text-center">
                <img src="" alt="Preview" id="imgView1" class="img-fluid mb-2">
              </div>                     <button type="button" id="saveButton1" class="btn btn-sm btn-primary">Save</button>

                    croppedCanvas.toBlob((blob) => {
                      const formData = new FormData();
                      formData.append('images',blob,'cropped-image.png');

                      fetch('/addproduct',{
                        method:'POST',
                        body:formData
                      })
                      .then(response => response.json())
                                  .then(data => {
                      console.log('Success:', data);
                    }) .catch(error => {
                      console.error('Error:', error);
                    },'image/png');
                    });



<!-- <! --==================== ========================================================================= --> -->
document.addEventListener("DOMContentLoaded", function() {
  const croppers = [];
  const croppedBlobs = {}; // Store cropped blobs by index

  function handleImageUpload(inputId, imgViewId, croppedImgId, saveButtonId, cropperIndex) {
      const inputElement = document.getElementById(inputId);
      const imgView = document.getElementById(imgViewId);
      const croppedImg = document.getElementById(croppedImgId);
      const saveButton = document.getElementById(saveButtonId);
      const cropperContainer = document.getElementById('cropperContainer' + cropperIndex);

      inputElement.addEventListener("change", function(event) {
          const files = event.target.files;
          if (files && files.length > 0) {
              const reader = new FileReader();
              reader.onload = function(e) {
                  imgView.src = e.target.result;
                  imgView.style.display = "block";

                  if (croppers[cropperIndex]) {
                      croppers[cropperIndex].destroy();
                  }

                  croppers[cropperIndex] = new Cropper(imgView, {
                      aspectRatio: 1,
                      viewMode: 2,
                      preview: '.cropped-img-container img',
                      autoCropArea: 1,
                      movable: true,
                      scalable: true,
                      zoomable: true,
                      rotatable: true,
                      cropBoxResizable: true,
                      minCropBoxWidth: 200,
                      minCropBoxHeight: 200
                  });

                  // cropperContainer.style.display = "flex";
              };
              reader.readAsDataURL(files[0]);
          }
      });

      saveButton.addEventListener("click", async function() {
        const croppedCanvas = croppers[cropperIndex].getCroppedCanvas();

          const croppedImageURL = croppedCanvas.toDataURL('image/png');  
          croppedImg.src = croppedImageURL;
          croppedImg.style.display = "block";

        const blob = await new Promise((resolve) => {
        croppedCanvas.toBlob(resolve, 'image/png');
        });

        const formData = new FormData();
        formData.append('images', blob, 'cropped-image.png');

        fetch('/addproduct', {
        method: 'POST',
        body: formData
        })
        .then(response => response.json())
        .then(data => {
        console.log('Success:', data);
        })
        .catch(error => {
        console.error('Error:', error);
        });
          croppers[cropperIndex].destroy();
          croppers[cropperIndex] = null;
          imgView.style.display = "none";
          cropperContainer.style.display = "none";
      });
  }

  // Initialize handlers for each image input
  handleImageUpload('input1', 'imgView1', 'croppedImg1', 'saveButton1', 1);
  handleImageUpload('input2', 'imgView2', 'croppedImg2', 'saveButton2', 2);
  handleImageUpload('input3', 'imgView3', 'croppedImg3', 'saveButton3', 3);
})





<!-- ========== -->
 <!-- Image 2 -->
 <!-- <div class="col-12 col-md-6 mb-3">
  <div class="card-body">
    <label for="input2">Upload Image 2:</label>
    <div class="text-center">
      <img src="" alt="Preview" id="imgView2" class="img-fluid mb-2">
    </div>
    <input class="form-control" type="file" name="images" id="input2" accept="image/png, image/jpeg, image/jpg">
    <div id="images-error2" class="error-message mt-2"></div>
  </div> -->
  <!-- Image Cropper -->
  <!-- <div class="image-cropper d-flex flex-column align-items-center">
    <div class="cropped-img-container"
         style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
      <img src="" id="croppedImg2" alt="Cropped Image" class="cropped-img img-fluid">
    </div>
    <button type="button" id="saveButton2" class="btn btn-sm btn-primary">crop</button>
  </div>
</div> -->

<!-- Image 3 -->
<!-- <div class="col-12 col-md-6 mb-3">
  <div class="card-body">
    <label for="input3">Upload Image 3:</label>
    <div class="text-center">
      <img src="" alt="Preview" id="imgView3" class="img-fluid mb-2">
    </div>
    <input class="form-control" type="file" name="images" id="input3" accept="image/png, image/jpeg, image/jpg">
    <div id="images-error3" class="error-message mt-2"></div>
  </div> -->
  <!-- Image Cropper -->
  <!-- <div class="image-cropper d-flex flex-column align-items-center">
    <div class="cropped-img-container"
         style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
      <img src="" id="croppedImg3" alt="Cropped Image" class="cropped-img img-fluid">
    </div>
    <button type="button" id="saveButton3" class="btn btn-sm btn-primary">crop</button>
  </div>
</div> -->
<!-- </div> -->




document.addEventListener("DOMContentLoaded", function() {
  const croppers = [];
  
  function handleImageUpload(inputId, imgViewId, croppedImgId, saveButtonId, cropperIndex) {
      const inputElement = document.getElementById(inputId);
      const imgView = document.getElementById(imgViewId);
      const croppedImg = document.getElementById(croppedImgId);
      const saveButton = document.getElementById(saveButtonId);
      const cropperContainer = document.getElementById('cropperImgContainer' + cropperIndex);

      inputElement.addEventListener("change", function(event) {
          const files = event.target.files;
          if (files && files.length > 0) {
              const reader = new FileReader();
              reader.onload = function(e) {
                  imgView.src = e.target.result;
                  imgView.style.display = "block";

                  if (croppers[cropperIndex]) {
                      croppers[cropperIndex].destroy();
                  }

                  croppers[cropperIndex] = new Cropper(imgView, {
                      aspectRatio: 1,
                      viewMode: 2,
                      preview: '.cropped-img-container img',
                      autoCropArea: 1,
                      movable: true,
                      scalable: true,
                      zoomable: true,
                      rotatable: true,
                      cropBoxResizable: true,
                      minCropBoxWidth: 200,
                      minCropBoxHeight: 200
                  });

                  cropperContainer.style.display = "flex";
              };
              reader.readAsDataURL(files[0]);
          }
      });

      saveButton.addEventListener("click", async function() {
        if (!croppers[cropperIndex]) {
              console.error(`Cropper instance ${cropperIndex} not found.`);
              return;
          }

        const croppedCanvas = croppers[cropperIndex].getCroppedCanvas();

        if (!croppedCanvas) {
              console.error(`Failed to get cropped canvas for cropper ${cropperIndex}.`);
              return;
          }

          const croppedImageURL = croppedCanvas.toDataURL('image/png');  
          croppedImg.src = croppedImageURL;
          croppedImg.style.display = "block";

          const blob = await new Promise((resolve) => {
              croppedCanvas.toBlob((blob) => {
                  console.log('Blob created:', blob);
                  resolve(blob);
              }, 'image/png');
          });

          if (!blob) {
              console.error(`Blob creation failed for cropper ${cropperIndex}.`);
              return;
          }

          // Create a File from the Blob and update the file input
          const file = new File([blob], `cropped-image-${cropperIndex}.png`, { type: 'image/png' });
          const dataTransfer = new DataTransfer();
          dataTransfer.items.add(file);
          document.getElementById(inputId).files = dataTransfer.files;

          // Prepare FormData
          const formData = new FormData();
          formData.append(inputId, file);

          // Include other form data if necessary
          // Example: formData.append('productName', document.getElementById('productName').value);

          fetch('/addproduct', {
            method: 'POST',
            body: formData
          })
          .then(response => response.json())
          .then(data => {
            console.log('Success:', data);
          })
          .catch(error => {
            console.error('Error:', error);
          });

          croppers[cropperIndex].destroy();
          croppers[cropperIndex] = null;
          imgView.style.display = "none";
          cropperContainer.style.display = "none";
      });
  }

  // Initialize handlers for each image input
  handleImageUpload('input1', 'imgView1', 'croppedImg1', 'saveButton1', 1);
  handleImageUpload('input2', 'imgView2', 'croppedImg2', 'saveButton2', 2);
  handleImageUpload('input3', 'imgView3', 'croppedImg3', 'saveButton3', 3);
});



  // validation code
document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('productForm');      
  function nameValidate() {
    const name = document.getElementsByName('name')[0].value.trim();
    const error1 = document.getElementById('productName-error');

    if (name === "") {
      error1.style.display = 'block';
      error1.innerHTML = 'Please enter a product name.';
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
      error1.style.display = 'block';
      error1.innerHTML = 'Product name should contain only alphabetic characters.';
    } else {
      error1.style.display = 'none';
      error1.innerHTML = '';
    }
  }

  function descriptionValidation() {
    const description = document.getElementById('descriptionid').value.trim();
    const error2 = document.getElementById('description-error');

    if (description === "") {
      error2.style.display = "block";
      error2.innerHTML = "Please enter a description.";
    } else if (description.length < 1) {
      error2.style.display = "block";
      error2.innerHTML = "Description should be at least 50 characters.";
    } else {
      error2.style.display = "none";
      error2.innerHTML = '';
    }
  }

  function priceValidation() {
    const price = document.getElementsByName('price')[0].value.trim();
    const error3 = document.getElementById('regularPrice-error');

    if (price === "") {
      error3.style.display = "block";
      error3.innerHTML = "Please enter a price.";
    } else if (!/^\₹?\d+(\.\d{2})?$/.test(price)) {
      error3.style.display = "block";
      error3.innerHTML = "Invalid price format. Please use ₹XX.XX";
    } else {
      error3.style.display = "none";
      error3.innerHTML = '';
    }
  }

  function offerValidation() {
    const offer = document.getElementsByName('Offerprice')[0].value.trim();
    const error4 = document.getElementById('salePrice-error');

    if (offer === "") {
      error4.style.display = "block";
      error4.innerHTML = "Please enter an offer price.";
    } else if (!/^\₹?\d+(\.\d{2})?$/.test(offer)) {
      error4.style.display = "block";
      error4.innerHTML = "Invalid offer price format. Please use ₹XX.XX";
    } else {
      error4.style.display = "none";
      error4.innerHTML = '';
    }
  }

  function quantityValidation() {
    const quantity = document.getElementById('quantity').value.trim();
    const error5 = document.getElementById('quantity-error');

    if (quantity === "") {
      error5.style.display = 'block';
      error5.innerHTML = 'Please enter the quantity.';
    } else if (!/^\d+$/.test(quantity)) {
      error5.style.display = 'block';
      error5.innerHTML = 'Quantity should be a positive number.';
    } else {
      error5.style.display = 'none';
      error5.innerHTML = '';
    }
  }

  function categoryValidation() {
    const category = document.getElementById('category').value;
    const error6 = document.getElementById('category-error');

    if (category === "") {
      error6.style.display = 'block';
      error6.innerHTML = 'Please select a category.';
    } else {
      error6.style.display = 'none';
      error6.innerHTML = '';
    }
  }

  function colorValidation() {
    const color = document.getElementById('color').value.trim();
    const error7 = document.getElementById('color-error');

    if (color === "") {
      error7.style.display = 'block';
      error7.innerHTML = 'Please enter a color.';
    } else {
      error7.style.display = 'none';
      error7.innerHTML = '';
    }
  }
  function validateImages() {
    const imageInputs = document.querySelectorAll('input[type="file"][name="images"]');
    let isValid = true;
    
    imageInputs.forEach((input, index) => {
      const imageErrorElement = document.getElementById(`images-error`);
      
      if (input.files.length === 0) {
        imageErrorElement.style.display = 'block';
        imageErrorElement.innerHTML = 'Please select an images.';
        isValid = false;
      } else {
        imageErrorElement.style.display = 'none';
        imageErrorElement.innerHTML = '';
      }
    });
    
    return isValid;
  }
  

  form.addEventListener('submit', (e) => {
    nameValidate();
    descriptionValidation();
    priceValidation();
    offerValidation();
    quantityValidation();
    categoryValidation();
    colorValidation();
    const imagesValid = validateImages();

    // Prevent form submission if there are errors
    if (document.getElementById('productName-error').style.display === 'block' || 
        document.getElementById('description-error').style.display === 'block' ||
        document.getElementById('regularPrice-error').style.display === 'block' ||
        document.getElementById('salePrice-error').style.display === 'block' ||
        document.getElementById('quantity-error').style.display === 'block' ||
        document.getElementById('category-error').style.display === 'block' ||
        document.getElementById('color-error').style.display === 'block'||
        !imagesValid) {
      e.preventDefault();
    }
  });
});

</script>


<!-- edit -->
 <%- include('../adminlayouts/header') %>
<head>
  <!-- <link href="./node_modules/cropperjs/dist/cropper.min.css" rel="stylesheet"> -->

</head>
<style>
  input[type="text"],
  input[type="number"],
  textarea {
    width: 75%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-sizing: border-box;
  }

  .main-panel {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  .content-wrapper {
    flex: 1;
  }

  .back-button {
    color: white;
    background-color: #1cc0a0;
    border: none;
    padding: 10px 20px;
    text-decoration: none;
    border-radius: 5px;
  }

  .back-button:hover {
    background-color: white;
    color: #1cc0a0;
    border: 1px solid #1cc0a0;
  }

  .sub-btn {
    color: white;
    background-color: #1cc0a0;
    border: none;
    border-radius: 5px;
    padding: 10px 20px;
  }

  .sub-btn:hover {
    background-color: white;
    color: #1cc0a0;
    border: 1px solid #1cc0a0;
  }

  .header-flex {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .form-section {
    margin-bottom: 20px;
  }

  .form-label {
    margin-bottom: 10px;
  }
  input[type="file"] {
    width: 400px;       
    padding: 15px;      
    font-size: 12px; 
    border-radius: 5px;  
    border: 1px solid #ccc; 
    background-color: #fdfcfc; 
}

input[type="file"]::-webkit-file-upload-button {
    padding: 5px; 
    font-size: 12px; 
}

input[type="file"]::-ms-browse {
    padding: 5px; 
    font-size: 12px; 
}

input[type="file"]::-webkit-file-upload-text {
    padding: 5px; 
    font-size: 12px; 
}

.error-message{
  color: red;
  font-size: 12px;
}
.image-cropper {
  display: none;
  flex-direction: column;
  align-items: center;
} 

 .img-fluid {
  max-width: 100%;
  height: auto;
} 

.cropped-img-container {
  width: 200px;
  height: 200px;
  background-color: #f8f9fa;
  margin-bottom: 10px;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
/* display: none; */
}
.cropped-img {
  width: 100%;
 height: 100%;
  object-fit:contain; 
  display: block;
}


.btn-sm {
  width: 80px;
}
.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5); /* Transparent background */
  justify-content: center;
  align-items: center;
  /* z-index: 1000; Ensures the modal appears on top */
}

.modal-content {
  background: #faf9f9;
  padding: 20px;
  border-radius: 5px;
  width: 90%;
  max-width: 600px;
  max-height: 80%;
  overflow: hidden;
  position: relative;
  margin: auto;
}

#image {
    max-width: 100%;
    max-height: 80vh; /* To limit the height within the viewport */
    display: block;
}

/* Media Query for Smaller Screens */
@media (max-width: 768px) {
  .modal-content {
    width: 95%;
    max-width: 90%;
    padding: 15px;
  }

  #image {
    max-height: 50vh;
  }
}

@media (max-width: 480px) {
  .modal-content {
    width: 100%;
    max-width: 100%;
    padding: 10px;
    border-radius: 0;
  }

  #image {
    max-height: 200px;
  }
}



</style>
<body>
  

<div class="main-panel">
  <div class="content-wrapper">
    <div class="col-lg-12 grid-margin stretch-card">
      <div class="card">
        <div class="card-body">
          <div class="mb-3 d-flex justify-content-between">
            <h3 class="card-title fs-5 mb-0">Edit Product</h3>
            <a href="/admin/product" class="back-button btn btn-primary float-right">Back to Product</a>
          </div>
          

          <% if (product) { %>
            <form id="productForm" method="POST" action="/admin/editproduct/<%= product._id %>" enctype="multipart/form-data">
                <div class="row form-section">
                    <div class="col-lg-6 mb-4">
                      <label for="product_name" class="form-label">Product Name</label>
                      <input type="text" placeholder="Type here" name="name" class="form-control border" id="product_name" value="<%=product.name%>">
                      <div id="productName-error" class="error-message" style="display:none; color:red;"></div>
                    </div>
                    
                    <div class="col-lg-4 mb-4">
                      <div class="col-lg-6 mb-4 ">
                        <label class="form-label">Category</label>
                      <select class="form-select border" style="width: 350px; " name="category" id="category" >
                          <option value="">Select Category</option>
                          <% for(let i=0;i<category.length;i++){ %>
                            <option value="<%= category[i].name%>"><%= category[i].name %></option>
                          <% } %>
                        </select>
                        <div id="category-error" class="error-message"></div>
                      </div>
                    </div>
      
                  <div class="row form-section">
                    <div class="col-lg-4 mb-4">
                      <label class="form-label"> Price</label>
                      <input placeholder="₹" name="price" type="text" class="form-control border"value="<%=product.price%>">
                      <div id="regularPrice-error" class="error-message"></div>
                    </div>
                    
                    <div class="col-lg-4 mb-4">
                      <label class="form-label">Offer Price</label>
                      <input placeholder="₹" name="offerprice" type="text" class="form-control border" value="<%=product.offerprice%>">
                      <div id="salePrice-error" class="error-message"></div>
                    </div>
                    
                    <div class="col-lg-4 mb-4">
                      <label class="form-label">Quantity</label>
                      <input placeholder="Product Quantity" name="quantity" type="number" class="form-control border " id="quantity" value="<%=product.quantity%>">
                      <div id="quantity-error" class="error-message"></div>
                    </div>
                  </div>
      
      
                  <div class="row form-section">
                    <label class="form-label">Full Description</label>
                    <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control borde  w-50"  rows="4"  value="<%=product.description%>"></textarea>
                    <div id="description-error" class="error-message" style="display:none; color:red;"></div>
                  </div>
                
                    
                    <div class="col-lg-6 mb-4">
                      <label class="form-label">Color</label>
                      <input name="color" type="text" class="form-control border w-50" id="color" value="<%=product.color%>">
                      <div id="color-error" class="error-message"></div>
                    </div>
                  </div>
      
                  <div class="card mb-2">
                    <div class="card-header">
                        <h4>Choose images</h4>
                    </div>
                   <% for(let i=0;i<product.productImage.length;i++) {%>
      <div class="col-12 col-md-6 mb-3">
        <div class="card-body">
          <label for="input">Upload Image 1:</label>
          <div class="text-center">
            <img  id="imgView1" class="img-fluid mb-2">
      
          </div>
          <input class="form-control" type="file"  id="input1" name="images" accept="image/png, image/jpeg, image/jpg" >
          <div id="images-error1" class="error-message mt-2"></div>
        </div>
        <% } %>
        <!-- Image Cropper -->
        <div class="image-cropper d-flex flex-column align-items-center">
          <div id="croppedImgContainer1" class="cropped-img-container" style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
            <img src="/public/uploads/<%=product.productImage[i]%>" id="croppedImg1" alt="Cropped Image" class="cropped-img img-fluid">
        </div>
        
          <button type="button" id="saveButton1" class="btn btn-sm btn-primary">crop</button>
        </div>
      </div>
      
      
       <!-- Image 2 -->
       <div class="col-12 col-md-6 mb-3">
        <div class="card-body">
          <label for="input">Upload Image 2:</label>
          <div class="text-center">
            <img src=""  id="imgView2" class="img-fluid mb-2">
          </div>
          <input class="form-control" type="file"  id="input2"  name="images"accept="image/png, image/jpeg, image/jpg">
          <div id="images-error1" class="error-message mt-2"></div>
        </div>
        <!-- Image Cropper -->
        <div class="image-cropper d-flex flex-column align-items-center">
          <div id="croppedImgContainer2" class="cropped-img-container" style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
      
            <img src="/public/uploads/<%=product.productImage[i]%>" id="croppedImg2" alt="Cropped Image" class="cropped-img img-fluid">
          </div>
          <button type="button" id="saveButton2" class="btn btn-sm btn-primary">crop</button>
        </div>
      </div>
      
      <!-- Image 3 -->
      <div class="col-12 col-md-6 mb-3">
        <div class="card-body">  
          <label for="input">Upload Image 3:</label>
          <div class="text-center">
            <img src=""  id="imgView3" class="img-fluid mb-2">
          </div>
          <input class="form-control" type="file"  id="input3" name="images" accept="image/png, image/jpeg, image/jpg">
          <div id="images-error3" class="error-message mt-2"></div>
        </div>
        <!-- Image Cropper -->
        <div class="image-cropper d-flex flex-column align-items-center">
          <div id="croppedImgContainer3" class="cropped-img-container" style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
            <img src="/public/uploads/<%=product.productImage[i]%>"  id="croppedImg3"alt="Cropped Image" class="cropped-img img-fluid">
          </div>
          <button type="button" id="saveButton3" class="btn btn-sm btn-primary">crop</button>
        </div>
      <!-- </div> -->
      <!-- </div> -->
                    
       
      </div> <!--card end-->
                  <div class="form-section">
                    <% if (typeof message !== 'undefined' && message) { %>
                      <div class="alert alert-info msg text-center ">
                          <%= message %>
                      </div>
                  <% } %>
                    <button class="btn btn-md rounded sub-btn"  id="pulish"  type="submit">Submit Product</button>
                  </div>
            </form>
          <% } else { %>
            <p>Product not found.</p>
          <% } %>
                    
          
        </div>
      </div>
    </div>
  </div>

 

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<!-- <script src="./node_modules/cropperjs/dist/cropper.min.js"></script> -->

<script>
document.addEventListener("DOMContentLoaded", function() {
  const croppers = [];

  function validateForm() {
    let isValid = true;

    document.querySelectorAll('.error-message').forEach(el => el.style.display = 'none');

    // Validate Product Name
    const productName = document.getElementById('product_name').value.trim();
    if (productName === '') {
      document.getElementById('productName-error').textContent = 'Product name is required.';
      document.getElementById('productName-error').style.display = 'block';
      isValid = false;
    }

    // Validate Category
    const category = document.getElementById('category').value.trim();
    if (category === '') {
      document.getElementById('category-error').textContent = 'Category is required.';
      document.getElementById('category-error').style.display = 'block';
      isValid = false;
    }

    // Validate Regular Price
    const regularPrice = document.querySelector('input[name="price"]').value.trim();
    if (regularPrice === '' || isNaN(regularPrice) || parseFloat(regularPrice) <= 0) {
      document.getElementById('regularPrice-error').textContent = 'Price is required.';
      document.getElementById('regularPrice-error').style.display = 'block';
      isValid = false;
    }

    // Validate Sale Price
    const salePrice = document.querySelector('input[name="offerprice"]').value.trim();
    if (salePrice === '' || isNaN(salePrice) || parseFloat(salePrice) < 0) {
      document.getElementById('salePrice-error').textContent = 'Offer price is required.';
      document.getElementById('salePrice-error').style.display = 'block';
      isValid = false;
    }

    // Validate Quantity
    const quantity = document.getElementById('quantity').value.trim();
    if (quantity === '' || isNaN(quantity) || parseInt(quantity) <= 0) {
      document.getElementById('quantity-error').textContent = 'Quantity is required.';
      document.getElementById('quantity-error').style.display = 'block';
      isValid = false;
    }

    // Validate Description
    const description = document.getElementById('descriptionid').value.trim();
    if (description === '') {
      document.getElementById('description-error').textContent = 'Description is required.';
      document.getElementById('description-error').style.display = 'block';
      isValid = false;
    }

    // Validate Color
    const color = document.getElementById('color').value.trim();
    if (color === '') {
      document.getElementById('color-error').textContent = 'Color is required.';
      document.getElementById('color-error').style.display = 'block';
      isValid = false;
    }

    // Validate Images
    const imageInputs = document.querySelectorAll('input[type="file"][name="images"]');
    let imageValid = false;
    imageInputs.forEach(input => {
      if (input.files.length > 0) {
        imageValid = true;
      }
    });
    if (!imageValid) {
      document.getElementById('images-error').textContent = 'Image is required';
      document.getElementById('images-error').style.display = 'block';
      isValid = false;
    }

    return isValid;
  }

  function handleImageUpload(inputId, imgViewId, croppedImgId, saveButtonId, cropperIndex) {
    const inputElement = document.getElementById(inputId);
    const imgView = document.getElementById(imgViewId);
    const croppedImg = document.getElementById(croppedImgId);
    const saveButton = document.getElementById(saveButtonId);
    const cropperContainer = document.getElementById('croppedImgContainer' + cropperIndex);

    inputElement.addEventListener("change", function(event) {
      const files = event.target.files;
      if (files && files.length > 0) {
        const reader = new FileReader();
        reader.onload = function(e) {
          imgView.src = e.target.result;
          imgView.style.display = "block";

          if (croppers[cropperIndex]) {
            croppers[cropperIndex].destroy();
          }

          croppers[cropperIndex] = new Cropper(imgView, {
            aspectRatio: 1,
            viewMode: 2,
            preview: '.cropped-img-container img',
            autoCropArea: 1,
            movable: true,
            scalable: true,
            zoomable: true,
            rotatable: true,
            cropBoxResizable: true,
            minCropBoxWidth: 200,
            minCropBoxHeight: 200
          });

          cropperContainer.style.display = "flex";
        };
        reader.readAsDataURL(files[0]);
      }
    });

    saveButton.addEventListener("click", async function() {
    

      const croppedCanvas = croppers[cropperIndex].getCroppedCanvas();

      

      const croppedImageURL = croppedCanvas.toDataURL('image/png');  
      croppedImg.src = croppedImageURL;
      croppedImg.style.display = "block"
      
      const blob = await new Promise((resolve) => {
        croppedCanvas.toBlob((blob) => {
          console.log('Blob created:', blob);
          resolve(blob);
        }, 'image/png');
      });

      const file = new File([blob], `cropped-image-${cropperIndex}.png`, { type: 'image/png' });
      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(file);
      document.getElementById(inputId).files = dataTransfer.files;

      croppers[cropperIndex].destroy();
      croppers[cropperIndex] = null;
      imgView.style.display = "none";
    });
  }

  handleImageUpload('input1', 'imgView1', 'croppedImg1', 'saveButton1', 1);
  handleImageUpload('input2', 'imgView2', 'croppedImg2', 'saveButton2', 2);
  handleImageUpload('input3', 'imgView3', 'croppedImg3', 'saveButton3', 3);

  document.getElementById('productForm').addEventListener('submit', function(event) {
    event.preventDefault();

    if (validateForm()) {
      const formData = new FormData(this);

      fetch('/admin/editproduct/<%=product._id%>', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        console.log('Success:', data);

        Swal.fire({
          icon: 'success',
          title: 'Product Added',
          text: 'The product was added successfully!',
          confirmButtonText: 'OK'
        }).then(()=>{
          location.reload();
        })

      })
      .catch(error => {
        console.error('Error:', error);

        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Something went wrong!',
          confirmButtonText: 'OK'
        });
      });
    }
  });
});


// delete image
// function deleteSingleImage (imageId,productId){
//     fetch({'/admin/deleteImage',
//     method:'POST',
    

//     })
// }



 </script>
 <%- include('../adminlayouts/footer') %>
</div>

</body>

<div class="col-12 col-md-6 mb-3">
  <div class="card-body">
    <label for="input">Upload Image 1:</label>
    <div class="text-center">
      <img  id="imgView1" class="img-fluid mb-2">

    </div>
    <input class="form-control" type="file"  id="input1" name="images" accept="image/png, image/jpeg, image/jpg" >
    <i onclick="deleteSingleImage('<%=product.images[i]%>','<%=product._id%>')" style="position: absolute; margin-left: .5rem; cursor: pointer;" class="fa-thin fa-x"></i>

    <div id="images-error1" class="error-message mt-2"></div>
  </div>
  <!-- Image Cropper -->
  <div class="image-cropper d-flex flex-column align-items-center">
    <div id="croppedImgContainer1" class="cropped-img-container" style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
      <img src="" id="croppedImg1" alt="Cropped Image" class="cropped-img img-fluid">
  </div>
  
    <button type="button" id="saveButton1" class="btn btn-sm btn-primary">crop</button>
  </div>
</div>


 <!-- Image 2 -->
 <div class="col-12 col-md-6 mb-3">
  <div class="card-body">
    <label for="input">Upload Image 2:</label>
    <div class="text-center">
      <img src=""  id="imgView2" class="img-fluid mb-2">
    </div>
    <input class="form-control" type="file"  id="input2"  name="images"accept="image/png, image/jpeg, image/jpg">
    <div id="images-error1" class="error-message mt-2"></div>
  </div>
  <!-- Image Cropper -->
  <div class="image-cropper d-flex flex-column align-items-center">
    <div id="croppedImgContainer2" class="cropped-img-container" style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">

      <img src="" id="croppedImg2" alt="Cropped Image" class="cropped-img img-fluid">
    </div>
    <button type="button" id="saveButton2" class="btn btn-sm btn-primary">crop</button>
  </div>
</div>

<!-- Image 3 -->
<div class="col-12 col-md-6 mb-3">
  <div class="card-body">  
    <label for="input">Upload Image 3:</label>
    <div class="text-center">
      <img src=""  id="imgView3" class="img-fluid mb-2">
    </div>
    <input class="form-control" type="file"  id="input3" name="images" accept="image/png, image/jpeg, image/jpg">
    <div id="images-error3" class="error-message mt-2"></div>
  </div>
  <!-- Image Cropper -->
  <div class="image-cropper d-flex flex-column align-items-center">
    <div id="croppedImgContainer3" class="cropped-img-container" style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
      <img src=""  id="croppedImg3"alt="Cropped Image" class="cropped-img img-fluid">
    </div>
    <button type="button" id="saveButton3" class="btn btn-sm btn-primary">crop</button>
  </div>

  src="/public/uploads/<%=product.productImage[i]%>"    <div class="col-md-12">
                                           <div class="mb-4">
                                               <div class="col-12">
                                                   <td>
                                                       <input type="hidden" value="" id="imageDatas">
                                                       <img class="rounded" style="width: 50px; height: 60px;"
                                                           src=""
                                                           alt="">
                                                       <i onclick="" style="position: absolute; margin-left: .5rem; cursor: pointer;" class="fa-thin fa-x"></i>
                                                   </td>
                                               </div>
                                              
                                           </div>
                                       </div>
                              
                                       div class="col-12 col-md-6 mb-3">
                                       <div class="card-body">
                                         <label for="input">Upload Image 1:</label>
                                         <div class="text-center">
                                           <img id="imgView1" class="img-fluid mb-2" src="<%= product.images[0] %>" alt="Product Image 1">
                                         </div>
                                         <input class="form-control" type="file" id="input1" name="images" accept="image/png, image/jpeg, image/jpg">
                                         <i onclick="deleteSingleImage('<%= product.images[0] %>', '<%= product._id %>')" style="position: absolute; margin-left: .5rem; cursor: pointer;" class="fa-thin fa-x"></i>
                                         <div id="images-error1" class="error-message mt-2"></div>
                                       </div>
                                       <!-- Image Cropper -->
                                       <div class="image-cropper d-flex flex-column align-items-center">
                                         <div id="croppedImgContainer1" class="cropped-img-container" style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
                                           <img src="" id="croppedImg1" alt="Cropped Image" class="cropped-img img-fluid">
                                         </div>
                                         <button type="button" id="saveButton1" class="btn btn-sm btn-primary">crop</button>
                                       </div>
                                     </div>
                                     
                                     <!-- Image 2 -->
                                     <div class="col-12 col-md-6 mb-3">
                                       <div class="card-body">
                                         <label for="input">Upload Image 2:</label>
                                         <div class="text-center">
                                           <img id="imgView2" class="img-fluid mb-2" src="<%= product.images[1] %>" alt="Product Image 2">
                                         </div>
                                         <input class="form-control" type="file" id="input2" name="images" accept="image/png, image/jpeg, image/jpg">
                                         <div id="images-error2" class="error-message mt-2"></div>
                                       </div>
                                       <!-- Image Cropper -->
                                       <div class="image-cropper d-flex flex-column align-items-center">
                                         <div id="croppedImgContainer2" class="cropped-img-container" style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
                                           <img src="" id="croppedImg2" alt="Cropped Image" class="cropped-img img-fluid">
                                         </div>
                                         <button type="button" id="saveButton2" class="btn btn-sm btn-primary">crop</button>
                                       </div>
                                     </div>
                                     
                                     <!-- Image 3 -->
                                     <div class="col-12 col-md-6 mb-3">
                                       <div class="card-body">
                                         <label for="input">Upload Image 3:</label>
                                         <div class="text-center">
                                           <img id="imgView3" class="img-fluid mb-2" src="<%= product.images[2] %>" alt="Product Image 3">
                                         </div>
                                         <input class="form-control" type="file" id="input3" name="images" accept="image/png, image/jpeg, image/jpg">
                                         <div id="images-error3" class="error-message mt-2"></div>
                                       </div>
                                       <!-- Image Cropper -->
                                       <div class="image-cropper d-flex flex-column align-items-center">
                                         <div id="croppedImgContainer3" class="cropped-img-container" style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
                                           <img src="" id="croppedImg3" alt="Cropped Image" class="cropped-img img-fluid">
                                         </div>
                                         <button type="button" id="saveButton3" class="btn btn-sm btn-primary">crop</button>
                                       </div>
                                     </div>
                                     
                                             <!-- </div> -->
                                             <!-- </div> -->
                                             document.addEventListener("DOMContentLoaded", function() {
                                              const croppers = [];
                                              let imageCount = document.querySelectorAll('#existing-images img').length;
                                            
                                              function validateForm() {
                                                let isValid = true;
                                            
                                                document.querySelectorAll('.error-message').forEach(el => el.style.display = 'none');
                                            
                                                // Validate Product Name
                                                const productName = document.getElementById('product_name').value.trim();
                                                if (productName === '') {
                                                  document.getElementById('productName-error').textContent = 'Product name is required.';
                                                  document.getElementById('productName-error').style.display = 'block';
                                                  isValid = false;
                                                }
                                            
                                                // Validate Category
                                                const category = document.getElementById('category').value.trim();
                                                if (category === '') {
                                                  document.getElementById('category-error').textContent = 'Category is required.';
                                                  document.getElementById('category-error').style.display = 'block';
                                                  isValid = false;
                                                }
                                            
                                                // Validate Regular Price
                                                const regularPrice = document.querySelector('input[name="price"]').value.trim();
                                                if (regularPrice === '' || isNaN(regularPrice) || parseFloat(regularPrice) <= 0) {
                                                  document.getElementById('regularPrice-error').textContent = 'Price is required.';
                                                  document.getElementById('regularPrice-error').style.display = 'block';
                                                  isValid = false;
                                                }
                                            
                                                // Validate Sale Price
                                                const salePrice = document.querySelector('input[name="offerprice"]').value.trim();
                                                if (salePrice === '' || isNaN(salePrice) || parseFloat(salePrice) < 0) {
                                                  document.getElementById('salePrice-error').textContent = 'Offer price is required.';
                                                  document.getElementById('salePrice-error').style.display = 'block';
                                                  isValid = false;
                                                }
                                            
                                                // Validate Quantity
                                                const quantity = document.getElementById('quantity').value.trim();
                                                if (quantity === '' || isNaN(quantity) || parseInt(quantity) <= 0) {
                                                  document.getElementById('quantity-error').textContent = 'Quantity is required.';
                                                  document.getElementById('quantity-error').style.display = 'block';
                                                  isValid = false;
                                                }
                                            
                                                // Validate Description
                                                const description = document.getElementById('descriptionid').value.trim();
                                                if (description === '') {
                                                  document.getElementById('description-error').textContent = 'Description is required.';
                                                  document.getElementById('description-error').style.display = 'block';
                                                  isValid = false;
                                                }
                                            
                                                // Validate Color
                                                const color = document.getElementById('color').value.trim();
                                                if (color === '') {
                                                  document.getElementById('color-error').textContent = 'Color is required.';
                                                  document.getElementById('color-error').style.display = 'block';
                                                  isValid = false;
                                                }
                                            
                                                // Validate Images
                                                const imageInputs = document.querySelectorAll('input[type="file"][name="images"]');
                                                let imageValid = false;
                                                imageInputs.forEach(input => {
                                                  if (input.files.length > 0) {
                                                    imageValid = true;
                                                  }
                                                });
                                                if (!imageValid) {
                                                  document.getElementById('images-error').textContent = 'Image is required';
                                                  document.getElementById('images-error').style.display = 'block';
                                                  isValid = false;
                                                }
                                            
                                                return isValid;
                                              }
                                            
                                              function handleImageUpload(inputId, imgViewId, croppedImgId, saveButtonId, cropperIndex) {
                                                const inputElement = document.getElementById(inputId);
                                                const imgView = document.getElementById(imgViewId);
                                                const croppedImg = document.getElementById(croppedImgId);
                                                const saveButton = document.getElementById(saveButtonId);
                                                const cropperContainer = document.getElementById('croppedImgContainer' + cropperIndex);
                                            
                                                inputElement.addEventListener("change", function(event) {
                                                  const files = event.target.files;
                                                  if (files && files.length > 0) {
                                                    const reader = new FileReader();
                                                    reader.onload = function(e) {
                                                      imgView.src = e.target.result;
                                                      imgView.style.display = "block";
                                            
                                                      if (croppers[cropperIndex]) {
                                                        croppers[cropperIndex].destroy();
                                                      }
                                            
                                                      croppers[cropperIndex] = new Cropper(imgView, {
                                                        aspectRatio: 1,
                                                        viewMode: 2,
                                                        preview: '.cropped-img-container img',
                                                        autoCropArea: 1,
                                                        movable: true,
                                                        scalable: true,
                                                        zoomable: true,
                                                        rotatable: true,
                                                        cropBoxResizable: true,
                                                        minCropBoxWidth: 100,
                                                        minCropBoxHeight: 100
                                                      });
                                            
                                                      cropperContainer.style.display = "flex";
                                                    };
                                                    reader.readAsDataURL(files[0]);
                                                  }
                                                });
                                            
                                                saveButton.addEventListener("click", async function() {
                                                
                                            
                                           const croppedCanvas = croppers[cropperIndex].getCroppedCanvas({
                                                  width: 200, // Set the width of the cropped image
                                                  height: 300 // Set the height of the cropped image
                                                });    
                                                  
                                            
                                                  const croppedImageURL = croppedCanvas.toDataURL('image/png');  
                                                  croppedImg.src = croppedImageURL;
                                                  croppedImg.style.display = "block"
                                                  
                                                  const blob = await new Promise((resolve) => {
                                                    croppedCanvas.toBlob((blob) => {
                                                      console.log('Blob created:', blob);
                                                      resolve(blob);
                                                    }, 'image/png');
                                                  });
                                            
                                                  const file = new File([blob], `cropped-image-${cropperIndex}.png`, { type: 'image/png' });
                                                  const dataTransfer = new DataTransfer();
                                                  dataTransfer.items.add(file);
                                                  document.getElementById(inputId).files = dataTransfer.files;
                                            
                                                  croppers[cropperIndex].destroy();
                                                  croppers[cropperIndex] = null;
                                                  imgView.style.display = "none";
                                                });
                                              }
                                            
                                              handleImageUpload('input1', 'imgView1', 'croppedImg1', 'saveButton1', 1);
                                              handleImageUpload('input2', 'imgView2', 'croppedImg2', 'saveButton2', 2);
                                              handleImageUpload('input3', 'imgView3', 'croppedImg3', 'saveButton3', 3);
                                            
                                            
                                        
                                        
                                          //       function viewImage(event, cropperIndex) {
                                          //   const inputId = `input${cropperIndex}`;
                                          //   const imgViewId = `imgView${cropperIndex}`;
                                          //   const croppedImgId = `croppedImg${cropperIndex}`;
                                          //   const saveButtonId = `saveButton${cropperIndex}`;
                                          //   handleImageUpload(inputId, imgViewId, croppedImgId, saveButtonId, cropperIndex);
                                          // }
                                        
                                          
                                          // function deleteImage(element) { 
                                          //       const imagePath = element.getAttribute('data-image');
                                          //       fetch(`/admin/deleteImage`, {
                                          //           method: 'DELETE',
                                          //           headers: {
                                          //               'Content-Type': 'application/json'
                                          //           },
                                          //           body: JSON.stringify({ imagePath })
                                          //       })
                                          //       .then(response => response.json())
                                          //       .then(data => {
                                          //           if (data.success) {
                                          //               // Success alert
                                          //               Swal.fire({
                                          //                   icon: 'success',
                                          //                   title: 'Deleted!',
                                          //                   text: 'Image has been deleted.',
                                          //                   timer: 2000,
                                          //                   showConfirmButton: false
                                          //               });
                                          //               // Remove the image from the DOM
                                          //               document.getElementById(`image-container-${imageId}`).remove();
                                          //           } else {
                                          //               // Error alert
                                          //               Swal.fire({
                                          //                   icon: 'error',
                                          //                   title: 'Error!',
                                          //                   text: 'Failed to delete image.',
                                          //               });
                                          //           }
                                          //       })
                                          //       .catch(error => {
                                          //           // Network or other error alert
                                          //           Swal.fire({
                                          //               icon: 'error',
                                          //               title: 'Error!',
                                          //               text: 'An unexpected error occurred.',
                                          //           });
                                          //       });
                                          // }
                                        })
                                          
                                        onchange="viewImage(event, 1)"
                                        onchange="viewImage(event, 2)"
                                        onchange="viewImage(event, 3)"







                                        
<%- include('../adminlayouts/header') %>
<head>
  <!-- <link href="./node_modules/cropperjs/dist/cropper.min.css" rel="stylesheet"> -->

</head>
<style>
  input[type="text"],
  input[type="number"],
  textarea {
    width: 75%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-sizing: border-box;
  }

  .main-panel {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  .content-wrapper {
    flex: 1;
  }

  .back-button {
    color: white;
    background-color: #1cc0a0;
    border: none;
    padding: 10px 20px;
    text-decoration: none;
    border-radius: 5px;
  }

  .back-button:hover {
    background-color: white;
    color: #1cc0a0;
    border: 1px solid #1cc0a0;
  }

  .sub-btn {
    color: white;
    background-color: #1cc0a0;
    border: none;
    border-radius: 5px;
    padding: 10px 20px;
  }

  .sub-btn:hover {
    background-color: white;
    color: #1cc0a0;
    border: 1px solid #1cc0a0;
  }

  .header-flex {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .form-section {
    margin-bottom: 20px;
  }

  .form-label {
    margin-bottom: 10px;
  }
  input[type="file"] {
    width: 400px;       
    padding: 15px;      
    font-size: 12px; 
    border-radius: 5px;  
    border: 1px solid #ccc; 
    background-color: #fdfcfc; 
}

input[type="file"]::-webkit-file-upload-button {
    padding: 5px; 
    font-size: 12px; 
}

input[type="file"]::-ms-browse {
    padding: 5px; 
    font-size: 12px; 
}

input[type="file"]::-webkit-file-upload-text {
    padding: 5px; 
    font-size: 12px; 
}

.error-message{
  color: red;
  font-size: 12px;
}
.image-cropper {
  display: none;
  flex-direction: column;
  align-items: center;
} 

 .img-fluid {
  max-width: 100%;
  height: auto;
} 

.cropped-img-container {
  width: 200px;
  height: 200px;
  background-color: #f8f9fa;
  margin-bottom: 10px;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
/* display: none; */
}
.cropped-img {
  width: 100%;
 height: 100%;
  object-fit:cover; 
  display: block;
}


.btn-sm {
  width: 80px;
}
.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5); /* Transparent background */
  justify-content: center;
  align-items: center;
  /* z-index: 1000; Ensures the modal appears on top */
}

.modal-content {
  background: #faf9f9;
  padding: 20px;
  border-radius: 5px;
  width: 90%;
  max-width: 600px;
  max-height: 80%;
  overflow: hidden;
  position: relative;
  margin: auto;
}

#image {
    max-width: 100%;
    max-height: 80vh; /* To limit the height within the viewport */
    display: block;
}

/* Media Query for Smaller Screens */
@media (max-width: 768px) {
  .modal-content {
    width: 95%;
    max-width: 90%;
    padding: 15px;
  }

  #image {
    max-height: 50vh;
  }
}

@media (max-width: 480px) {
  .modal-content {
    width: 100%;
    max-width: 100%;
    padding: 10px;
    border-radius: 0;
  }

  #image {
    max-height: 200px;
  }
}
.fa-x {
    position: absolute;
    top: 2px;
    right: 2px;
    color: white;
    background-color: rgba(99, 95, 95, 0.5);
    padding: 2px 5px;
    border-radius: 50%;
    font-size: 8px;
    cursor: pointer;
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: center;
}

</style>
<body>
    <div class="main-panel">
      <div class="content-wrapper">
        <div class="col-lg-12 grid-margin stretch-card">
          <div class="card">
            <div class="card-body">
              <div class="mb-3 d-flex justify-content-between">
                <h3 class="card-title fs-5 mb-0">Edit Product</h3>
                <a href="/admin/product" class="back-button btn btn-primary float-right">Back to Product</a>
              </div>
              
    
              <% if (product) { %>
                <!-- <form id="productForm" method="POST" action="/admin/editproduct/<%= product._id %>" enctype="multipart/form-data"  -->
                  <form id="editproductForm" method="POST" action="/admin/editproduct/<%= product._id %>" enctype="multipart/form-data">

                    <div class="row form-section">
                        <div class="col-lg-6 mb-4">
                          <label for="product_name" class="form-label">Product Name</label>
                          <input type="text" placeholder="Type here" name="name" class="form-control border" id="product_name" value="<%=product.name%>">
                          <div id="productName-error" class="error-message" style="display:none; color:red;"></div>
                        </div>
                        
                        <div class="col-lg-4 mb-4">
                          <div class="col-lg-6 mb-4 ">
                            <label class="form-label">Category</label>
                          <select class="form-select border" style="width: 350px; " name="category" id="category" >
                              <% for(let i=0;i<category.length;i++){ %>
                                <option value="<%= category[i].name%>"><%= category[i].name %></option>
                              <% } %>
                            </select>
                            <div id="category-error" class="error-message"></div>
                          </div>
                        </div>
          
                      <div class="row form-section">
                        <div class="col-lg-4 mb-4">
                          <label class="form-label"> Price</label>
                          <input placeholder="₹" name="price" type="text" class="form-control border"value="<%=product.price%>">
                          <div id="regularPrice-error" class="error-message"></div>
                        </div>
                        
                        <div class="col-lg-4 mb-4">
                          <label class="form-label">Offer Price</label>
                          <input placeholder="₹" name="offerprice" type="text" class="form-control border" value="<%=product.offerprice%>">
                          <div id="salePrice-error" class="error-message"></div>
                        </div>
                        
                        <div class="col-lg-4 mb-4">
                          <label class="form-label">Quantity</label>
                          <input placeholder="Product Quantity" name="quantity" type="number" class="form-control border " id="quantity" value="<%=product.quantity%>">
                          <div id="quantity-error" class="error-message"></div>
                        </div>
                      </div>
          
          
                      <div class="row form-section">
                        <label class="form-label">Full Description</label>
                        <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border w-50" rows="4"><%= product.description %></textarea>
                        <div id="description-error" class="error-message" style="display:none; color:red;"></div>
                      </div>
                      
                    
                        
                        <div class="col-lg-6 mb-4">
                          <label class="form-label">Color</label>
                          <input name="color" type="text" class="form-control border w-50" id="color" value="<%=product.color%>">
                          <div id="color-error" class="error-message"></div>
                        </div>
                      </div>
          
                      <!-- <div class="card mb-2">
                        <div class="card-header">
                            <h4>Choose images</h4>
                        </div> -->

          <!-- </div> -->
          <div class="form-group mt-2">
            <label for="productImage">Existing Images</label>
            <div id="existing-images" class="d-flex flex-wrap">
                <% for(let i=0;i<product.images.length;i++) {%>
                    <div class="me-2 position-relative">
                        <img src="/uploads/<%=product.images[i]%>" alt="Image <%= i + 1 %>" 
                            class="img-thumbnail" style="max-width: 100px; max-height: 100px;" />
                        <span class="position-absolute top-0 end-0 cursor-pointer" 
                              data-image="<%= product.images[i] %>" onclick="deleteImage(this)">
                            <i class="fa-solid fa-x"></i>
                        </span>
                    </div>
                <% } %>
            </div>
        </div>

            <div class="col-12 col-md-6 mb-3">
              <div class="card-body">
                <label for="input">Upload Image 1:</label>
                <div class="text-center">
                  <img src=""  id="imgView1" class="img-fluid mb-2">
                </div>
                <input class="form-control" type="file"  id="input1" name="images" accept="image/png, image/jpeg, image/jpg">                
                <div id="images-error1" class="error-message mt-2"></div>
              </div>
              <div class="image-cropper d-flex flex-column align-items-center">
                <div id="croppedImgContainer1" class="cropped-img-container" style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; justify-content: center; align-items: center; display: none" >
                  <img src="" id="croppedImg1" alt="Cropped Image" class="cropped-img img-fluid">
              </div>
                <button type="button" id="saveButton1" class="btn btn-sm btn-primary">crop</button>
              </div>
            </div>
            
            <div class="col-12 col-md-6 mb-3">
              <div class="card-body">
                <label for="input">Upload Image 2:</label>
                <div class="text-center">
                  <img src=""  id="imgView2" class="img-fluid mb-2" >
                </div>
                <input class="form-control" type="file"  id="input2" name="images" accept="image/png, image/jpeg, image/jpg">                
                <div id="images-error2" class="error-message mt-2"></div>
              </div>
              <div class="image-cropper d-flex flex-column align-items-center">
                <div id="croppedImgContainer2" class="cropped-img-container" style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; justify-content: center; align-items: center; display: none" >
                  <img src="" id="croppedImg2" alt="Cropped Image" class="cropped-img img-fluid">
              </div>
                <button type="button" id="saveButton2" class="btn btn-sm btn-primary">crop</button>
              </div>
            </div>
            
              
            
            <div class="col-12 col-md-6 mb-3">
              <div class="card-body">
                <label for="input">Upload Image 3:</label>
                <div class="text-center">
                  <img src=""  id="imgView3" class="img-fluid mb-2" >
                </div>
                <input class="form-control" type="file"  id="input3" name="images" accept="image/png, image/jpeg, image/jpg">                
                <div id="images-error3" class="error-message mt-2"></div>
              </div>
              <div class="image-cropper d-flex flex-column align-items-center">
                <div id="croppedImgContainer3" class="cropped-img-container" style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; justify-content: center; align-items: center; display: none" >
                  <img src="" id="croppedImg3" alt="Cropped Image" class="cropped-img img-fluid">
              </div>
                <button type="button" id="saveButton3" class="btn btn-sm btn-primary">crop</button>
              </div>
            </div>
            
            
        </div>
        
           
          </div> <!--card end-->
                      <div class="form-section">
                        <% if (typeof message !== 'undefined' && message) { %>
                          <div class="alert alert-info msg text-center ">
                              <%= message %>
                          </div>
                      <% } %>
                        <button class="btn btn-md rounded sub-btn"  id="pulish"  type="submit">Submit Product</button>
                      </div>
                </form>
              <% } else { %>
                <p>Product not found.</p>
              <% } %>
                        
            </div>
          </div>
      <!-- </div> -->
    
     
    
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    
    <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <!-- <script src="./node_modules/cropperjs/dist/cropper.min.js"></script> -->
    
    <script>
   document.addEventListener("DOMContentLoaded", function() {
  const croppers = [];

  function validateForm() {
    let isValid = true;

    document.querySelectorAll('.error-message').forEach(el => el.style.display = 'none');

    // Validate Product Name
    const productName = document.getElementById('product_name').value.trim();
    if (productName === '') {
      document.getElementById('productName-error').textContent = 'Product name is required.';
      document.getElementById('productName-error').style.display = 'block';
      isValid = false;
    }

    // Validate Category
    const category = document.getElementById('category').value.trim();
    if (category === '') {
      document.getElementById('category-error').textContent = 'Category is required.';
      document.getElementById('category-error').style.display = 'block';
      isValid = false;
    }

    // Validate Regular Price
    const regularPrice = document.querySelector('input[name="price"]').value.trim();
    if (regularPrice === '' || isNaN(regularPrice) || parseFloat(regularPrice) <= 0) {
      document.getElementById('regularPrice-error').textContent = 'Price is required.';
      document.getElementById('regularPrice-error').style.display = 'block';
      isValid = false;
    }

    // Validate Sale Price
    const salePrice = document.querySelector('input[name="offerprice"]').value.trim();
    if (salePrice === '' || isNaN(salePrice) || parseFloat(salePrice) < 0) {
      document.getElementById('salePrice-error').textContent = 'Offer price is required.';
      document.getElementById('salePrice-error').style.display = 'block';
      isValid = false;
    }

    // Validate Quantity
    const quantity = document.getElementById('quantity').value.trim();
    if (quantity === '' || isNaN(quantity) || parseInt(quantity) <= 0) {
      document.getElementById('quantity-error').textContent = 'Quantity is required.';
      document.getElementById('quantity-error').style.display = 'block';
      isValid = false;
    }

    // Validate Description
    const description = document.getElementById('descriptionid').value.trim();
    if (description === '') {
      document.getElementById('description-error').textContent = 'Description is required.';
      document.getElementById('description-error').style.display = 'block';
      isValid = false;
    }

    // Validate Color
    const color = document.getElementById('color').value.trim();
    if (color === '') {
      document.getElementById('color-error').textContent = 'Color is required.';
      document.getElementById('color-error').style.display = 'block';
      isValid = false;
    }

    // Validate Images
    const imageInputs = document.querySelectorAll('input[type="file"][name="images"]');
    let imageValid = false;
    imageInputs.forEach(input => {
      if (input.files.length > 0) {
        imageValid = true;
      }
    });
    if (!imageValid) {
      document.getElementById('images-error').textContent = 'Image is required';
      document.getElementById('images-error').style.display = 'block';
      isValid = false;
    }

    return isValid;
  }

  function handleImageUpload(inputId, imgViewId, croppedImgId, saveButtonId, cropperIndex) {
    const inputElement = document.getElementById(inputId);
    const imgView = document.getElementById(imgViewId);
    const croppedImg = document.getElementById(croppedImgId);
    const saveButton = document.getElementById(saveButtonId);
    const cropperContainer = document.getElementById('croppedImgContainer' + cropperIndex);

    inputElement.addEventListener("change", function(event) {
      const files = event.target.files;
      if (files && files.length > 0) {
        const reader = new FileReader();
        reader.onload = function(e) {
          imgView.src = e.target.result;
          imgView.style.display = "block";

          if (croppers[cropperIndex]) {
            croppers[cropperIndex].destroy();
          }

          croppers[cropperIndex] = new Cropper(imgView, {
            aspectRatio: 1,
            viewMode: 2,
            preview: '.cropped-img-container img',
            autoCropArea: 1,
            movable: true,
            scalable: true,
            zoomable: true,
            rotatable: true,
            cropBoxResizable: true,
            minCropBoxWidth: 200,
            minCropBoxHeight: 200
          });

          cropperContainer.style.display = "flex";
        };
        reader.readAsDataURL(files[0]);
      }
    });

    saveButton.addEventListener("click", async function() {
    

      const croppedCanvas = croppers[cropperIndex].getCroppedCanvas();

      

      const croppedImageURL = croppedCanvas.toDataURL('image/png');  
      croppedImg.src = croppedImageURL;
      croppedImg.style.display = "block"
      
      const blob = await new Promise((resolve) => {
        croppedCanvas.toBlob((blob) => {
          console.log('Blob created:', blob);
          resolve(blob);
        }, 'image/png');
      });

      const file = new File([blob], `cropped-image-${cropperIndex}.png`, { type: 'image/png' });
      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(file);
      document.getElementById(inputId).files = dataTransfer.files;

      croppers[cropperIndex].destroy();
      croppers[cropperIndex] = null;
      imgView.style.display = "none";
    });
  }

  handleImageUpload('input1', 'imgView1', 'croppedImg1', 'saveButton1', 1);
  handleImageUpload('input2', 'imgView2', 'croppedImg2', 'saveButton2', 2);
  handleImageUpload('input3', 'imgView3', 'croppedImg3', 'saveButton3', 3);

  document.getElementById('editproductForm').addEventListener('submit', function(event) {
    event.preventDefault();

    if (validateForm()) {
      const formData = new FormData(this);

      fetch(`/admin/editproduct/${productId}`, {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        console.log('Success:', data);

        Swal.fire({
          icon: 'success',
          title: 'Product Added',
          text: 'The product was added successfully!',
          confirmButtonText: 'OK'
        }).then(()=>{
          location.reload();
        })

      })
      .catch(error => {
        console.error('Error:', error);

        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Something went wrong!',
          confirmButtonText: 'OK'
        });
      });
    }
  });
});

function deleteImage(span) {
    const image = span.getAttribute('data-image');
    
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/deleteImage/${encodeURIComponent(image)}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire('Deleted!', 'Your image has been deleted.', 'success').then(() => {
                        span.closest('div.me-2').remove();
                    });
                } else {
                    Swal.fire('Error!', data.message || 'There was a problem deleting the image.', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire('Error!', 'There was a problem deleting the image.', 'error');
            });
        }
    });
}


     </script>
         </div>

     <%- include('../adminlayouts/footer') %>

    </div>
    
    </body>




    <%- include('../layouts/admin/header.ejs') -%>

<div class="main-content">
    <div class="main-content-inner">
        <div class="main-content-wrap">
            <div class="flex items-center flex-wrap justify-between gap20 mb-27">
                <h3>Edit Product</h3>
            </div>

            <form action="/admin/update-product/<%= product._id %>" method="post" enctype="multipart/form-data" class="tf-section-2 form-edit-product" id="validateform">
                <div class="wg-box">
                    <div class="cols gap22">
                        <!-- Product Name -->
                        <fieldset class="name">
                            <div class="body-title mb-10">Product name <span class="tf-color-1">*</span></div>
                            <input class="mb-10" type="text" placeholder="Enter product name" id="productName" name="productName" value="<%= product.productName %>" tabindex="0" required>
                            <div class="error-message" style="color: red;" id="error-name"></div>
                        </fieldset>

                        <!-- Quantity -->
                        <fieldset class="quantity">
                            <div class="body-title mb-10">Quantity <span class="tf-color-1">*</span></div>
                            <input class="mb-10" type="number" placeholder="Enter product quantity" id="quantity" name="quantity" value="<%= product.quantity %>" tabindex="0" required>
                            <div class="error-message" style="color: red;" id="error-quantity"></div>
                        </fieldset>
                    </div>

                    <div class="cols gap22">
                        <!-- Category -->
                        <fieldset class="category">
                            <div class="body-title mb-10">Category <span class="tf-color-1">*</span></div>
                            <select class="mb-10" name="category" id="category" required>
                                <% console.log(categories)%>
                                <% categories.forEach(cat => { %>
                                    <option value="<%= cat._id %>"><%= cat.name %></option>
                                <% }) %>
                            </select>
                            <div class="error-message" style="color: red;" id="error-category"></div>
                        </fieldset>

                        <!-- Status -->
                        <fieldset class="status">
                            <div class="body-title mb-10">Status <span class="tf-color-1">*</span></div>
                            <select class="mb-10" name="status" id="status" required>
                                <option value="Active" <%= product.status === 'Active' ? 'selected' : '' %>>Active</option>
                                <option value="Inactive" <%= product.status === 'Inactive' ? 'selected' : '' %>>Inactive</option>
                            </select>
                            <div class="error-message" style="color: red;" id="error-status"></div>
                        </fieldset>
                    </div>

                    <div class="cols gap22">
                        <!-- Price -->
                        <fieldset class="price">
                            <div class="body-title mb-10">Price <span class="tf-color-1">*</span></div>
                            <input class="mb-10" type="number" placeholder="Enter product price" id="price" name="price" value="<%= product.price %>" tabindex="0" required>
                            <div class="error-message" style="color: red;" id="error-price"></div>
                        </fieldset>
                    </div>

                    <!-- Description -->
                    <fieldset class="description">
                        <div class="body-title mb-10">Description <span class="tf-color-1">*</span></div>
                        <textarea class="mb-10" placeholder="Enter product description" id="description" name="description" tabindex="0" required><%= product.description %></textarea>
                        <div class="error-message" style="color: red;" id="error-description"></div>
                    </fieldset>
                </div>

                <div class="wg-box">
                    <!-- Existing Images (on the right side) -->
                    <fieldset class="existing-images">
                        <div class="body-title mb-10">Existing Images</div>
                        <div class="existing-images-container d-flex flex-wrap">
                            <% product.productImage.forEach(img => { %>
                                <div class="image-container">
                                    <img src="<%= img %>" alt="Product Image" class="product-image">
                                    <button type="button" class="btn-delete-image" data-id="<%= product._id %>" data-image="<%= img %>">Delete</button>
                                </div>
                            <% }) %>
                        </div>
                        <input type="hidden" name="existingImages" value="<%= product.productImage %>">
                    </fieldset>

                    <!-- Add New Images -->
                    <fieldset class="new-images">
                        <div class="body-title mb-10">Add New Images</div>
                        <div class="row g-3">
                            <div class="col-md-4">
                                <input type="file" id="productImage1" name="productImage1" onchange="handleFileChange(event, 1)">
                                <img id="image1Preview" src="#" alt="Image Preview" style="display:none; max-width: 100%; height: auto;" />
                            </div>
                            <div class="col-md-4">
                                <input type="file" id="productImage2" name="productImage2" onchange="handleFileChange(event, 2)">
                                <img id="image2Preview" src="#" alt="Image Preview" style="display:none; max-width: 100%; height: auto;" />
                            </div>
                            <div class="col-md-4">
                                <input type="file" id="productImage3" name="productImage3" onchange="handleFileChange(event, 3)">
                                <img id="image3Preview" src="#" alt="Image Preview" style="display:none; max-width: 100%; height: auto;" />
                            </div>
                        </div>
                        <div class="error-message" style="color: red;" id="error-images"></div>
                    </fieldset>
                </div>

                <div class="cols gap10">
                    <button class="tf-button w-full" type="submit">Update Product</button>
                </div>
            </form>
        </div>
    </div>
</div>

<%- include('../layouts/admin/footer.ejs') -%>

<!-- Include Cropper.js from a CDN or local file -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />

<script>
    let cropper1, cropper2, cropper3;

    function handleFileChange(event, imageNumber) {
        const imagePreview = document.getElementById('image' + imageNumber + 'Preview');
        const file = event.target.files[0];

        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                imagePreview.src = e.target.result;
                imagePreview.style.display = 'block';
                initCropper(imagePreview, imageNumber);
            };
            reader.readAsDataURL(file);
        }
    }

    function initCropper(imageElement, imageNumber) {
        if (imageNumber === 1 && cropper1) cropper1.destroy();
        if (imageNumber === 2 && cropper2) cropper2.destroy();
        if (imageNumber === 3 && cropper3) cropper3.destroy();

        let cropperInstance = new Cropper(imageElement, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 1,
            movable: true,
            zoomable: true,
            rotatable: true,
            scalable: true,
        });

        if (imageNumber === 1) cropper1 = cropperInstance;
        if (imageNumber === 2) cropper2 = cropperInstance;
        if (imageNumber === 3) cropper3 = cropperInstance;
    }

    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.btn-delete-image').forEach(button => {
            button.addEventListener('click', function () {
                const productId = this.getAttribute('data-id');
                const image = this.getAttribute('data-image');

                fetch('/admin/delete-image', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId, image })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        this.closest('.image-container').remove();
                    } else {
                        alert('Error deleting image');
                    }
                })
                .catch(err => console.error('Error:', err));
            });
        });
    });
</script>

ejs
<%- include('../layouts/admin/header.ejs') -%>

<div class="main-content">
    <div class="main-content-inner">
        <div class="main-content-wrap">
            <div class="flex items-center flex-wrap justify-between gap20 mb-27">
                <h3>Edit Product</h3>
            </div>

            <form action="/admin/update-product/<%= product._id %>" method="post" enctype="multipart/form-data" class="tf-section-2 form-edit-product" id="validateform">
                <div class="wg-box">
                    <div class="cols gap22">
                        <!-- Product Name -->
                        <fieldset class="name">
                            <div class="body-title mb-10">Product name <span class="tf-color-1">*</span></div>
                            <input class="mb-10" type="text" placeholder="Enter product name" id="productName" name="productName" value="<%= product.productName %>" tabindex="0" required>
                            <div class="error-message" style="color: red;" id="error-name"></div>
                        </fieldset>

                        <!-- Quantity -->
                        <fieldset class="quantity">
                            <div class="body-title mb-10">Quantity <span class="tf-color-1">*</span></div>
                            <input class="mb-10" type="number" placeholder="Enter product quantity" id="quantity" name="quantity" value="<%= product.quantity %>" tabindex="0" required>
                            <div class="error-message" style="color: red;" id="error-quantity"></div>
                        </fieldset>
                    </div>

                    <div class="cols gap22">
                        <!-- Category -->
                        <fieldset class="category">
                            <div class="body-title mb-10">Category <span class="tf-color-1">*</span></div>
                            <select class="mb-10" name="category" id="category" required>
                                <% console.log(categories)%>
                                <% categories.forEach(cat => { %>
                                    <option value="<%= cat._id %>"><%= cat.name %></option>
                                <% }) %>
                            </select>
                            <div class="error-message" style="color: red;" id="error-category"></div>
                        </fieldset>

                        <!-- Status -->
                        <fieldset class="status">
                            <div class="body-title mb-10">Status <span class="tf-color-1">*</span></div>
                            <select class="mb-10" name="status" id="status" required>
                                <option value="Active" <%= product.status === 'Active' ? 'selected' : '' %>>Active</option>
                                <option value="Inactive" <%= product.status === 'Inactive' ? 'selected' : '' %>>Inactive</option>
                            </select>
                            <div class="error-message" style="color: red;" id="error-status"></div>
                        </fieldset>
                    </div>

                    <div class="cols gap22">
                        <!-- Price -->
                        <fieldset class="price">
                            <div class="body-title mb-10">Price <span class="tf-color-1">*</span></div>
                            <input class="mb-10" type="number" placeholder="Enter product price" id="price" name="price" value="<%= product.price %>" tabindex="0" required>
                            <div class="error-message" style="color: red;" id="error-price"></div>
                        </fieldset>
                    </div>

                    <!-- Description -->
                    <fieldset class="description">
                        <div class="body-title mb-10">Description <span class="tf-color-1">*</span></div>
                        <textarea class="mb-10" placeholder="Enter product description" id="description" name="description" tabindex="0" required><%= product.description %></textarea>
                        <div class="error-message" style="color: red;" id="error-description"></div>
                    </fieldset>
                </div>

                <div class="wg-box">
                    <!-- Existing Images (on the right side) -->
                    <fieldset class="existing-images">
                        <div class="body-title mb-10">Existing Images</div>
                        <div class="existing-images-container d-flex flex-wrap">
                            <% product.productImage.forEach(img => { %>
                                <div class="image-container">
                                    <img src="<%= img %>" alt="Product Image" class="product-image">
                                    <button type="button" class="btn-delete-image" data-id="<%= product._id %>" data-image="<%= img %>">Delete</button>
                                </div>
                            <% }) %>
                        </div>
                        <input type="hidden" name="existingImages" value="<%= product.productImage %>">
                    </fieldset>

                    <!-- Add New Images -->
                    <fieldset class="new-images">
                        <div class="body-title mb-10">Add New Images</div>
                        <div class="row g-3">
                            <div class="col-md-4">
                                <input type="file" id="productImage1" name="productImage1" onchange="handleFileChange(event, 1)">
                                <img id="image1Preview" src="#" alt="Image Preview" style="display:none; max-width: 100%; height: auto;" />
                            </div>
                            <div class="col-md-4">
                                <input type="file" id="productImage2" name="productImage2" onchange="handleFileChange(event, 2)">
                                <img id="image2Preview" src="#" alt="Image Preview" style="display:none; max-width: 100%; height: auto;" />
                            </div>
                            <div class="col-md-4">
                                <input type="file" id="productImage3" name="productImage3" onchange="handleFileChange(event, 3)">
                                <img id="image3Preview" src="#" alt="Image Preview" style="display:none; max-width: 100%; height: auto;" />
                            </div>
                        </div>
                        <div class="error-message" style="color: red;" id="error-images"></div>
                    </fieldset>
                </div>

                <div class="cols gap10">
                    <button class="tf-button w-full" type="submit">Update Product</button>
                </div>
            </form>
        </div>
    </div>
</div>

<%- include('../layouts/admin/footer.ejs') -%>

<!-- Include Cropper.js from a CDN or local file -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />

<script>
    let cropper1, cropper2, cropper3;

    function handleFileChange(event, imageNumber) {
        const imagePreview = document.getElementById('image' + imageNumber + 'Preview');
        const file = event.target.files[0];

        if (file) {
            const reader = new FileReader();
            reader.onload = function(e) {
                imagePreview.src = e.target.result;
                imagePreview.style.display = 'block';
                initCropper(imagePreview, imageNumber);
            };
            reader.readAsDataURL(file);
        }
    }

    function initCropper(imageElement, imageNumber) {
        if (imageNumber === 1 && cropper1) cropper1.destroy();
        if (imageNumber === 2 && cropper2) cropper2.destroy();
        if (imageNumber === 3 && cropper3) cropper3.destroy();

        let cropperInstance = new Cropper(imageElement, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 1,
            movable: true,
            zoomable: true,
            rotatable: true,
            scalable: true,
        });

        if (imageNumber === 1) cropper1 = cropperInstance;
        if (imageNumber === 2) cropper2 = cropperInstance;
        if (imageNumber === 3) cropper3 = cropperInstance;
    }

    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.btn-delete-image').forEach(button => {
            button.addEventListener('click', function () {
                const productId = this.getAttribute('data-id');
                const image = this.getAttribute('data-image');

                fetch('/admin/delete-image', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId, image })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        this.closest('.image-container').remove();
                    } else {
                        alert('Error deleting image');
                    }
                })
                .catch(err => console.error('Error:', err));
            });
        });
    });
</script>

controller

const Product = require('../../models/productModel');
const Category = require('../../models/categoryModel');
const fs = require('fs');
const path = require('path');

// Function to load the Add Product page
const loadAddProduct = async (req, res) => {
    try {
        const categoryData = await Category.find({ isListed: false });
        res.render('add-product', { categoryData });
    } catch (error) {
        console.log("Error loading add product page:", error);
        res.status(500).send('Server Error');
    }
};

// Function to add a new product
const addProduct = async (req, res) => {
    try {
        const { productName, description, category, price, quantity, status } = req.body;

        if (!req.files.productImage1 || !req.files.productImage2 || !req.files.productImage3) {
            return res.status(400).send('All three images are required');
        }

        const product = new Product({
            productName,
            description,
            category,
            price,
            quantity,
            productImage: [
                "/productImages/" + req.files.productImage1[0].filename,
                "/productImages/" + req.files.productImage2[0].filename,
                "/productImages/" + req.files.productImage3[0].filename
            ],
            status
        });

        await product.save();
        res.redirect('/admin/products');
        
    } catch (error) {
        console.error(error);
        res.status(500).send('Server Error');
    }
};

// Function to load products for display
const getProducts = async (req, res) => {
    try {
        let page = parseInt(req.query.page) || 1;
        const limit = 3;
        const skip = (page - 1) * limit;

        const products = await Product.find({})
            .sort({ createdAt: -1 })
            .skip(skip)
            .limit(limit)
            .populate('category', 'name isListed'); // Populate category data

        const totalProducts = await Product.countDocuments();
        const totalPages = Math.ceil(totalProducts / limit);

        res.render('products', {
            products: products,
            currentPage: page,
            totalPages: totalPages,
            totalProducts: totalProducts
        });
    } catch (error) {
        console.error(error);
        res.status(500).send('Server Error');
    }
};

// Function to load the Edit Product page
const getEditProduct = async (req, res) => {
    try {
        const productId = req.params.id;
        const categoryData = await Category.find({ isListed: false });
        const editProductData = await Product.findById(productId);

        res.render('edit-product', {
            product: editProductData,
            categories: categoryData
        });
    } catch (err) {
        console.log(err);
        res.status(500).send('Server Error');
    }
};

// Function to handle editing a product
const updateProduct = async (req, res) => {
    try {
        const productId = req.params.id;

        // Split existing images string into an array
        const existingImages = req.body.existingImages ? req.body.existingImages.split(',').map(img => img.trim()) : [];

        const updateProductData = {
            productName: req.body.productName,
            description: req.body.description,
            price: req.body.price,
            quantity: req.body.quantity,
            category: req.body.category,
            status: req.body.status,
            productImage: existingImages // Initialize with existing images
        };

        // Handle new images upload
        if (req.files && req.files.length > 0) {
            const newImages = req.files.map(file => {
                return "/productImages/" + file.filename;
            });

            // Combine existing and new images
            updateProductData.productImage = [...existingImages, ...newImages];
        }

        await Product.findByIdAndUpdate(productId, updateProductData, { new: true });
        res.redirect('/admin/products');
    } catch (err) {
        console.log(err);
        res.status(500).send('Server Error');
    }
};


// Function to list a product
const listProduct = async (req, res) => {
    try {
        let productId = req.query.id;
        await Product.updateOne({ _id: productId }, { $set: { isBlocked: false } });
        res.redirect('/admin/products');
    } catch (error) {
        console.log("Error listing product:", error);
        res.redirect('/pageError');
    }
};

// Function to unlist a product
const unlistProduct = async (req, res) => {
    try {
        let productId = req.query.id;
        await Product.updateOne({ _id: productId }, { $set: { isBlocked: true } });
        res.redirect('/admin/products');
    } catch (error) {
        console.log("Error unlisting product:", error);
        res.redirect('/pageError');
    }
};

// Function to delete a product image
const deleteImage = async (req, res) => {
    try {
        const { productId, image } = req.body;

        // Remove the image from the filesystem
        const imagePath = path.join(__dirname, '../../public', image);
        if (fs.existsSync(imagePath)) {
            fs.unlinkSync(imagePath);
        }

        // Remove the image from the product document
        await Product.findByIdAndUpdate(productId, { $pull: { productImage: image } });

        res.json({ success: true });
    } catch (err) {
        console.error('Error deleting image:', err);
        res.status(500).json({ success: false });
    }
};

module.exports = {
    loadAddProduct,
    addProduct,
    getProducts,
    getEditProduct,
    updateProduct,
    listProduct,
    unlistProduct,
    deleteImage
};



let cropper1, cropper2, cropper3;

// Initialize Cropper based on the image number
function initCropper(imageElement, imageNumber) {
    // Destroy any existing cropper instance
    if (imageNumber === 1 && cropper1) cropper1.destroy();
    if (imageNumber === 2 && cropper2) cropper2.destroy();
    if (imageNumber === 3 && cropper3) cropper3.destroy();

    // Create a new cropper instance
    let cropperInstance = new Cropper(imageElement, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 1,
        movable: true,
        zoomable: true,
        rotatable: true,
        scalable: true,
    });

    // Store the cropper instance
    if (imageNumber === 1) cropper1 = cropperInstance;
    if (imageNumber === 2) cropper2 = cropperInstance;
    if (imageNumber === 3) cropper3 = cropperInstance;
}

// Handle file change and initialize the cropper
function handleFileChange(event, imageNumber) {
    const imagePreview = document.getElementById('imgView' + imageNumber);
    const file = event.target.files[0];

    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            imagePreview.src = e.target.result;
            imagePreview.style.display = 'block';
            initCropper(imagePreview, imageNumber);
        };
        reader.readAsDataURL(file);
    }
}

// Crop the image based on the selected cropper instance
function cropImage(imageNumber) {
    let cropperInstance;
    if (imageNumber === 1) cropperInstance = cropper1;
    if (imageNumber === 2) cropperInstance = cropper2;
    if (imageNumber === 3) cropperInstance = cropper3;

    if (cropperInstance) {
        const canvas = cropperInstance.getCroppedCanvas({
            width: 200,
            height: 300,
        });

        const imagePreview = document.getElementById('imgView' + imageNumber);
        imagePreview.src = canvas.toDataURL(); // Update the preview with the cropped image

        // Optional: reset the cropper if you need to crop again
        cropperInstance.destroy();
        if (imageNumber === 1) cropper1 = null;
        if (imageNumber === 2) cropper2 = null;
        if (imageNumber === 3) cropper3 = null;
    }
}

// Event listeners for file inputs and crop buttons
document.getElementById('input1').addEventListener('change', (event) => {
    handleFileChange(event, 1);
});
document.getElementById('saveButton1').addEventListener('click', () => {
    cropImage(1);
});

document.getElementById('input2').addEventListener('change', (event) => {
    handleFileChange(event, 2);
});
document.getElementById('saveButton2').addEventListener('click', () => {
    cropImage(2);
});

document.getElementById('input3').addEventListener('change', (event) => {
    handleFileChange(event, 3);
});
document.getElementById('saveButton3').addEventListener('click', () => {
    cropImage(3);
});
// document.getElementById('productForm').addEventListener('submit', function(e) {
  //     e.preventDefault(); // Prevent the default form submission
  
  //     // Add any additional form processing here
  //     // For example, you could create FormData and append other fields
  
  //     const formData = new FormData(this);
  
  //     // Send the form data using fetch or another AJAX method
  //     fetch('/editproduct/:id', {
  //         method: 'POST',
  //         body: formData,
  //     })
  //     .then(response => response.json())
  //     .then(data => {
  //         console.log('Success:', data);
  //     })
  //     .catch(error => {
  //         console.error('Error:', error);
  //     });
  // });
  
  document.getElementById('productForm').addEventListener('submit', function(e) {
      e.preventDefault(); // Prevent the default form submission
  
      const formData = new FormData(this);
      ['input1', 'input2', 'input3'].forEach((inputId) => {
          const input = document.getElementById(inputId);
          if (input.files.length > 0) {
              formData.append('images[]', input.files[0]);
          }
      });
      fetch(`/admin/editproduct/${productId}`,{
          method: 'POST',
          body: formData,
      })
      .then(response => response.json())
      .then(data => {
          Swal.fire({
              title: 'Success!',
              text: 'Images have been uploaded successfully.',
              icon: 'success',
              confirmButtonText: 'Okay'
          });
      })
      .catch(error => {
          Swal.fire({
              title: 'Error!',
              text: 'Something went wrong. Please try again.',
              icon: 'error',
              confirmButtonText: 'Okay'
          });
          console.error('Error:', error);
      });
  });



  let cropper1, cropper2, cropper3;

function initCropper(imageElement, imageNumber) {
    if (imageNumber === 1 && cropper1) cropper1.destroy();
    if (imageNumber === 2 && cropper2) cropper2.destroy();
    if (imageNumber === 3 && cropper3) cropper3.destroy();

    let cropperInstance = new Cropper(imageElement, {
        aspectRatio: 1,
        viewMode: 1,
        autoCropArea: 1,
        movable: true,
        zoomable: true,
        rotatable: true,
        scalable: true,
    });

    if (imageNumber === 1) cropper1 = cropperInstance;
    if (imageNumber === 2) cropper2 = cropperInstance;
    if (imageNumber === 3) cropper3 = cropperInstance;
}

function handleFileChange(event, imageNumber) {
    const imagePreview = document.getElementById('imgView' + imageNumber);
    const file = event.target.files[0];

    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            imagePreview.src = e.target.result;
            imagePreview.style.display = 'block';
            initCropper(imagePreview, imageNumber);
        };
        reader.readAsDataURL(file);
    }
}

function cropImage(imageNumber) {
    let cropperInstance;
    if (imageNumber === 1) cropperInstance = cropper1;
    if (imageNumber === 2) cropperInstance = cropper2;
    if (imageNumber === 3) cropperInstance = cropper3;

    if (cropperInstance) {
        const canvas = cropperInstance.getCroppedCanvas({
            width: 200,
            height: 300,
        });

        canvas.toBlob((blob) => {
            const fileName = `cropped-image-${imageNumber}.png`;
            const file = new File([blob], fileName, { type: 'image/png' });

            const input = document.getElementById('input' + imageNumber);
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            input.files = dataTransfer.files;

           
            const imagePreview = document.getElementById('imgView' + imageNumber);
            imagePreview.src = canvas.toDataURL();

            cropperInstance.destroy();
            if (imageNumber === 1) cropper1 = null;
            if (imageNumber === 2) cropper2 = null;
            if (imageNumber === 3) cropper3 = null;
        });
      }
    }
document.getElementById('input1').addEventListener('change', (event) => {
    handleFileChange(event, 1);
});
document.getElementById('saveButton1').addEventListener('click', () => {
    cropImage(1);
});

document.getElementById('input2').addEventListener('change', (event) => {
    handleFileChange(event, 2);
});
document.getElementById('saveButton2').addEventListener('click', () => {
    cropImage(2);
});

document.getElementById('input3').addEventListener('change', (event) => {
    handleFileChange(event, 3);
});
document.getElementById('saveButton3').addEventListener('click', () => {
    cropImage(3);
});
 
document.getElementById('productForm').addEventListener('submit', function(e) {
      e.preventDefault(); 
  
      const formData = new FormData(this);
      ['input1', 'input2', 'input3'].forEach((inputId) => {
          const input = document.getElementById(inputId);
          if (input.files.length > 0) {
              formData.append('images[]', input.files[0]);
          }
      });
      fetch(`/admin/editproduct/${productId}`,{
          method: 'POST',
          body: formData,
      })
      .then(response => response.json())
      .then(data => {
          Swal.fire({
              title: 'Success!',
              text: 'Images have been uploaded successfully.',
              icon: 'success',
              confirmButtonText: 'Okay'
          });
      })
      .catch(error => {
          Swal.fire({
              title: 'Error!',
              text: 'Something went wrong. Please try again.',
              icon: 'error',
              confirmButtonText: 'Okay'
          });
          console.error('Error:', error);
      });
  });
  document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('.btn-delete-image').forEach(button => {
    button.addEventListener('click', function() {
      const productId = this.getAttribute('data-id');
      const image = this.getAttribute('data-image');
      const imageContainer = this.closest('.image-container');

      // Send a DELETE request to the server to remove the image
      fetch(`/admin/products/${productId}/delete-image`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ image })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Remove the image from the UI
          imageContainer.remove();

          // Update the hidden input field
          const existingImages = JSON.parse(document.getElementById('existingImages').value);
          const updatedImages = existingImages.filter(img => img !== image);
          document.getElementById('existingImages').value = JSON.stringify(updatedImages);
        } else {
          console.error('Error deleting image:', data.message);
        }
      })
      .catch(err => console.error('Error:', err));
    });
  });
});


        <!-- Existing Images Section -->
                <div class="form-group mt-2">
                  <label for="productImage">Existing Images</label>
                  <div id="existing-images" class="d-flex flex-wrap">
                    <% for (let i = 0; i < product.images.length; i++) { %>
                      <div class="me-2 position-relative image-container">
                        <img src="/uploads/<%= product.images[i] %>" alt="Image <%= i + 1 %>" class="img-thumbnail existing-image" style="max-width: 100px; max-height: 100px;" />
                            <button type="button" class="btn btn-delete-image" data-id="<%= product._id %>" data-image="<%= product.images[i] %>">
                               <i class="fa fa-times"></i>
                        </button>
                      </div>
                    <% } %>
                  </div>
                  <input type="hidden" name="existingImages" id="existingImages" value='<%= JSON.stringify(product.images) %>'>
                </div>

                 <!-- Add New Images -->
                 <fieldset class="new-images">
                  <div class="body-title mb-10">Add New Images</div>
                  <div class="row g-3">
                    <div class="col-md-4">
                        <input type="file" id="input1" name="images" class="small-input" style="width: 250px;" onchange="handleFileSelect(event, 'imgView1', 'input1', 'saveButton1')">
                        <img id="imgView1" src="" class="img-fluid mb-2" style="display:none;">
                        <button type="button" id="saveButton1" class="btn btn-sm btn-primary" style='margin-top: 17px;' onclick="cropImage(1)">Crop</button>
                    </div>
                    <di v class="col-md-4">
                        <input type="file" id="input2" name="images" class="small-input" style="width: 250px;" onchange="handleFileSelect(event, 'imgView2', 'input2', 'saveButton2')">
                        <img id="imgView2" src="" class="img-fluid mb-2" style="display:none;">
                        <button type="button" id="saveButton2" class="btn btn-sm btn-primary" style='margin-top: 17px' onclick="cropImage(2)">Crop</button>
                    </div>
                    <div class="col-md-4">
                      <input type="file" id="input3" name="images" class="small-input" style="width: 250px;" onchange="handleFileSelect(event, 'imgView3', 'input3', 'saveButton3')">
                        <img id="imgViewe3" src="" class="img-fluid mb-2" style="display:none;">
                        <button type="button" id="saveButton3" class="btn btn-sm btn-primary" style='margin-top: 17px' onclick="cropImage(3)">Crop</button>
                    </div>
                </div>
                
                  </div>
                  <div class="error-message" style="color: red;" id="error-images"></div>
              </fieldset>
              
          <!-- </div> -->