<tbody>

<!-- <% roducts.forEach?.((product, index) => { %>
<tr>
<td><%= index + 1 %></td>
<td><%= product.name %></td>
<td><%= product.category?.name %></td>
<td>₹<%= product.price %></td>
<!-- <td><%= product.description %></td> -->
<td>₹<%= product.offerPrice %></td>
<td><%= product.quantity %></td>
<td> -->
<% product.image.forEach((image) => { %>
<img src="/uploads/<%= image %>" style="width: 50px; height: 50px;">
<% }); %>
</td>


<td>

<!-- product edit option -->
<a href="/admin/editProduct/<%= product._id %>" class="btn btn-primary">Edit</a>



<!-- product delete option -->
<!-- <form action="/admin/products/<%= product._id %>/delete" method="post" style="display: inline;">
<button type="submit" class="btn btn-danger">Delete</button>
</form> -->


<!-- product lit and unlist option -->
<% if (product.status === false) { %>
<button class="btn btn-success" onclick="toggleProductStatus('<%= product._id %>')">List</button>
<% } else { %>
<button class="btn btn-danger" onclick="toggleProductStatus('<%= product._id %>')">Unlist</button>
<% } %>



<!-- <form id="toggleForm_<%= product._id %>" action="/admin/product/<%= product._id %>/toggle" method="post" style="display: inline;">
<% if(product.listed){ %>
<button id="toggleButton_<%= product._id %>"  type="button" onclick="submitForm('<%= product._id %>','<%= product.listed %>','<%= index %>')"  class="btn btn-warning" data-toggle="modal" data-target="#confirmationModal">
<%= product.listed ? 'Unlist' : 'List' %>
</button>
<%}else{%>
<button id="toggleButton_<%= product._id %>"  type="button" onclick="submitForm('<%= product._id %>','<%= product.listed %>','<%= index %>')"  class="btn btn-success" data-toggle="modal" data-target="#confirmationModal">
<%= product.listed ? 'Unlist' : 'List' %>
</button>
<% } %>
<input type="hidden" name="_method" value="PUT">
<input type="hidden" name="listed" value="<%= !product.listed %>">
</form> -->


</td>
</tr>
<% }); %>

</tbody>
<div class="pagination" style="margin-left: 30%;">
<% if (currentPage > 1) { %>
<a class="pagination-link" href="?page=<%= currentPage - 1 %>">Previous</a>
<% } %>

<% for (let j = 1; j <= totalPages; j++) { %>
<a class="pagination-link <%= j === currentPage ? 'active' : '' %>" href="?page=<%= j %>"><%= j %></a>
<% } %>

<% if (currentPage < totalPages) { %>
<a class="pagination-link" href="?page=<%= currentPage + 1 %>">Next</a>
<% } %>
</div>


<%- include("../../views/partials/admin/header") %>
<head>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>
<style>
.error-message{
color: red;
}


.thumbnails-container {
display: flex;
overflow-x: auto;
}


.thumbnail {
margin-right: 10px;


}
</style>


<section class="content-main">
<div class="row">
<div class="col-9">
<div class="content-header">
<h2 class="content-title">Add New Product</h2>
</div>
</div>
<div class="col-lg-6">
<div class="card mb-4">
<div class="card-body">
<form method="" action="" enctype=""
onsubmit="return validateForm()
">
<div class="mb-4">
<label for="product_name" class="form-label">Product Name</label>
<input type="text" placeholder="Type here" name="productName"
class="form-control border" id="product_name">
<div id="productName-error" class="error-message"></div>
</div>
<div class="col-lg-4 mb-4">
<label class="form-label">Brand</label>
<select class="form-select border" name="brand">


<option value="">




</option>


</select>
<div id="brand-error" class="error-message"></div>
</div>
<div class="mb-4">
<label class="form-label">Full description</label>
<textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border"
rows="4"></textarea>
<div id="description-error" class="error-message"></div>
</div>
<div class="row">
<div class="col-lg-4">
<div class="mb-4">
<label class="form-label">Regular price</label>
<input placeholder="$" name="regularPrice" type="text"
class="form-control border">
<div id="regularPrice-error" class="error-message"></div>
</div>
</div>
<div class="col-lg-4">
<div class="mb-4">
<label class="form-label">Sale price</label>
<input placeholder="$" name="salePrice" type="text" class="form-control border">

</div>
<div id="salePrice-error" class="error-message"></div>
</div>
<div class="col-lg-4">
<div class="mb-4">
<label class="form-label">Quantity</label>
<input placeholder="" name="quantity" type="text" class="form-control border">
<div id="quantity-error" class="error-message"></div>
</div>
</div>
</div>
<div class="row">

<div class="col-lg-4">
<div class="mb-4">
<label class="form-label">Color</label>
<input  name="color" type="text" class="form-control border">
</div>
<div id="color-error" class="error-message"></div>
</div>

</div>
<div class="card mb-4">
<div class="card-body">
<div class="row gx-2">
<div class="col-sm-6 mb-3">
<label class="form-label">Category</label>
<select class="form-select border" style="width: 150px;" name="category">




<option value="">
    
</option>



</select>
<div id="category-error" class="error-message"></div>
</div>
</div>
</div>
</div>
<div class="card mb-2">
<div class="card-header">
<h4>Choose images</h4>
</div>
<div class="border row">
<div id="addedImagesContainer" class="thumbnails-container"></div>
</div>
<div class="row">
<div class="card-body align-items-center" style="margin-bottom: 20px;">
<img src="" alt="" id="imgView1">
                <input class="form-control" type="file" name="images" id="input1"
                    accept="image/png, image/jpeg, image/jpg"
                    onchange="viewImage1(event), viewImage(event, 1)">
                    <div id="images-error" class="error-message"></div>
            </div>
            <div class="image-cropper d-flex align-items-center"
                style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                <img src="" id="croppedImg1" alt="">
                <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
            </div>
        </div>
        
        <div class="row">
            <div class="card-body align-items-center" style="margin-bottom: 20px;">
                <img src="" alt="" id="imgView2">


                <input class="form-control" type="file" name="images" id="input2"
                    accept="image/png, image/jpeg, image/jpg"
                    onchange="viewImage2(event),viewImage(event, 2)">
            </div>
            <div class="image-cropper d-flex align-items-center"
                style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                <img src="" id="croppedImg2" alt="">
                <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
            </div>
        </div>
        
        <div class="row">
            <div class="card-body align-items-center" style="margin-bottom: 20px;">
                <img src="" alt="" id="imgView3">


                <input class="form-control" type="file" name="images" id="input3"
                    accept="image/png, image/jpeg, image/jpg"
                    onchange="viewImage3(event),viewImage(event, 3)">
            </div>
            <div class="image-cropper d-flex align-items-center"
                style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                <img src="" id="croppedImg3" alt="">
                <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
            </div>
        </div>
        
        <div class="row">
            <div class="card-body align-items-center" style="margin-bottom: 20px;">
                <img src="" alt="" id="imgView4">


        
                <input class="form-control" type="file" name="images" id="input4"
                    accept="image/png, image/jpeg, image/jpg"
                    onchange="viewImage4(event),viewImage(event, 4)">
            </div>
            <div class="image-cropper d-flex align-items-center"
                style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                <img src="" id="croppedImg4" alt="">
                <button type="button" id="saveButton4" class="btn-sm btn-primary">Save</button>
            </div>
        </div>

    </div>
</div>
<div>
<button class="btn btn-md rounded font-sm hover-up"  type="button" onclick="validateAndSubmit()
">Publish</button>
</div>
</form>
</div>
</div>
</div>
</div>
</section>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

<%- include("../../views/partials/admin/footer") %>
<script>
function validateAndSubmit(){
    if(validateForm()){
      document.forms(0).submit();
    }
  }
  
  function  viewImage1(event){
    document.getElementById('image1').src= URL.createObjectURL(event.target.files[0])
  }
  function  viewImage2(event){
    document.getElementById('image2').src= URL.createObjectURL(event.target.files[0])
  }
  function  viewImage3(event){
    document.getElementById('image3').src= URL.createObjectURL(event.target.files[0])
  }
  function  viewImage4(event){
    document.getElementById('image4').src= URL.createObjectURL(event.target.files[0])
  }
  
  function viewImage(event,index){
    let input = event.target;
    let reader = new FileReader();
    reader.onload = function (){
      let dataURL = reader.result;
      let image = document.getElementById('imageView'+index);
      image.src = dataURL;
      let cropper = new Copper(image,{
       aspectRatio:1,
       viewMode:1,
       guides:true,
       background:false,
       autoCropArea:1,
       zoomable:true
      });
  
          let  cropperContainer = document.querySelector('#croppedImg'+index).parentNode;
           cropperContainer.style.display='block';
  
           let saveButton = document.querySelector('#saveButton'+index);
           saveButton.addEventListener('click',async function () {
            
            let cropperCanvas = cropper.getCroppedCanvas();
            let croppedImage = document.getElementById('croppedImg'+index);
            croppedImage.src = cropperCanvas.toDataURL('image/jpeg',1.0);
  
            let timestamp = new Date().getTime();
            let fileName = `cropped-img${timestamp}-${index}.png`;
  
            await cropperCanvas.toBloob(blob=>{
              let input = document.getElementById('input'+index)
              let imgFile = new File({blob}.fileName.blob)
              const fileList = new DataTransfer();
              fileList.items.add(imgFile);
              input.files = fileList.files
            });
  
            cropperContainer.style.display = 'none';
            cropper.destroy()
           });
     };
     reader.readersDataURL(input.files[0]);
  }
  
  
        const selectedImages = {};
        document.getElementById('input1').addEventListener('change',handleFileSelect);
  
        function handleFileSelect(event){
          const addedImagesContainer = document.getElementById('addedImagesContainer');
          addedImagesContainer.innerHTML = '';
          const files = event.target.files;
           for(let i=0;i<files.length;i++){
              const file = files[i];
              selectedImages.push(file);
              const thumbnail = document.createElement('div');
              thumbnail.classList.add('thumbnail');
  
              const img = document.createElement('img');
              img.src = URL.createObjectURL(file);
              img.alt = 'thumbnail';
              img.style.width = '50px';
              img.style.height = 'auto';
              const remoneIcon = document.createElement('span');
              remoneIcon.classList.add('remove icon');
              remveIcon.innerHTML = '4times:';
              remoneIcon.addEventListener('click',function(){
                const index = selectedImages.index(file);
                if(index !== -1){
                  selectedImages.splice(index,1)
                }
                thumbnail.remove();
              });
              thumbnail.appendChild(img);
              thumbnail.appendChild(remoneIcon);
              addedImagesContainer.appendChild(thumbnail);
           }
        }
    </script>


     <!-- <div class="row">
                <div class="col-12 col-md-6 mb-3">
                  <div class="card-body">
                    <label for="input1">Upload Image 1:</label>
                    <div class="text-center">
                      <img src="" alt="Preview" id="imgView1" class="img-fluid mb-2">
                    </div>
                    <input class="form-control" type="file" name="images" id="input1" accept="image/png, image/jpeg, image/jpg">
                    <div id="images-error1" class="error-message mt-2"></div>
                  </div>
                  <div class="image-cropper d-flex justify-content-center align-items-center cropped-img-container"
                       style="display:none; width: 200px; height: 200px; margin-bottom: 20px; background-color: #1cc0a0;">
                    <img src="" id="croppedImg1" alt="Cropped Image" class="cropped-img">
                    <button type="button" id="saveButton1" class="btn btn-sm btn-primary ms-2 ">Save</button>

                  </div>
                <!-- </div> -->

                
               <div class="row"> 
                <div class="col-12 col-md-6 mb-3">
                  <div class="card-body">
                    <label for="input1">Upload Image 1:</label>
                    <input class="form-control" type="file" name="images" id="input1" accept="image/png, image/jpeg, image/jpg">
                    <div id="images-error1" class="error-message mt-2"></div>
                  </div>
                  <!-- Image Cropper -->
                  <div class="image-cropper d-flex flex-column align-items-center">
                    <div class="cropped-img-container"
                         style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
                      <img src="" id="croppedImg1" alt="Cropped Image" class="cropped-img img-fluid" style="max-width: 100%; max-height: 100%;">
                    </div>
                    <button type="button" id="saveButton1" class="btn btn-sm btn-primary">Save</button>
                  </div>
                </div>
              </div>


              <div class="text-center">
                <img src="" alt="Preview" id="imgView1" class="img-fluid mb-2">
              </div>                     <button type="button" id="saveButton1" class="btn btn-sm btn-primary">Save</button>

                    croppedCanvas.toBlob((blob) => {
                      const formData = new FormData();
                      formData.append('images',blob,'cropped-image.png');

                      fetch('/addproduct',{
                        method:'POST',
                        body:formData
                      })
                      .then(response => response.json())
                                  .then(data => {
                      console.log('Success:', data);
                    }) .catch(error => {
                      console.error('Error:', error);
                    },'image/png');
                    });



<!-- <! --==================== ========================================================================= --> -->
document.addEventListener("DOMContentLoaded", function() {
  const croppers = [];
  const croppedBlobs = {}; // Store cropped blobs by index

  function handleImageUpload(inputId, imgViewId, croppedImgId, saveButtonId, cropperIndex) {
      const inputElement = document.getElementById(inputId);
      const imgView = document.getElementById(imgViewId);
      const croppedImg = document.getElementById(croppedImgId);
      const saveButton = document.getElementById(saveButtonId);
      const cropperContainer = document.getElementById('cropperContainer' + cropperIndex);

      inputElement.addEventListener("change", function(event) {
          const files = event.target.files;
          if (files && files.length > 0) {
              const reader = new FileReader();
              reader.onload = function(e) {
                  imgView.src = e.target.result;
                  imgView.style.display = "block";

                  if (croppers[cropperIndex]) {
                      croppers[cropperIndex].destroy();
                  }

                  croppers[cropperIndex] = new Cropper(imgView, {
                      aspectRatio: 1,
                      viewMode: 2,
                      preview: '.cropped-img-container img',
                      autoCropArea: 1,
                      movable: true,
                      scalable: true,
                      zoomable: true,
                      rotatable: true,
                      cropBoxResizable: true,
                      minCropBoxWidth: 200,
                      minCropBoxHeight: 200
                  });

                  // cropperContainer.style.display = "flex";
              };
              reader.readAsDataURL(files[0]);
          }
      });

      saveButton.addEventListener("click", async function() {
        const croppedCanvas = croppers[cropperIndex].getCroppedCanvas();

          const croppedImageURL = croppedCanvas.toDataURL('image/png');  
          croppedImg.src = croppedImageURL;
          croppedImg.style.display = "block";

        const blob = await new Promise((resolve) => {
        croppedCanvas.toBlob(resolve, 'image/png');
        });

        const formData = new FormData();
        formData.append('images', blob, 'cropped-image.png');

        fetch('/addproduct', {
        method: 'POST',
        body: formData
        })
        .then(response => response.json())
        .then(data => {
        console.log('Success:', data);
        })
        .catch(error => {
        console.error('Error:', error);
        });
          croppers[cropperIndex].destroy();
          croppers[cropperIndex] = null;
          imgView.style.display = "none";
          cropperContainer.style.display = "none";
      });
  }

  // Initialize handlers for each image input
  handleImageUpload('input1', 'imgView1', 'croppedImg1', 'saveButton1', 1);
  handleImageUpload('input2', 'imgView2', 'croppedImg2', 'saveButton2', 2);
  handleImageUpload('input3', 'imgView3', 'croppedImg3', 'saveButton3', 3);
})





<!-- ========== -->
 <!-- Image 2 -->
 <!-- <div class="col-12 col-md-6 mb-3">
  <div class="card-body">
    <label for="input2">Upload Image 2:</label>
    <div class="text-center">
      <img src="" alt="Preview" id="imgView2" class="img-fluid mb-2">
    </div>
    <input class="form-control" type="file" name="images" id="input2" accept="image/png, image/jpeg, image/jpg">
    <div id="images-error2" class="error-message mt-2"></div>
  </div> -->
  <!-- Image Cropper -->
  <!-- <div class="image-cropper d-flex flex-column align-items-center">
    <div class="cropped-img-container"
         style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
      <img src="" id="croppedImg2" alt="Cropped Image" class="cropped-img img-fluid">
    </div>
    <button type="button" id="saveButton2" class="btn btn-sm btn-primary">crop</button>
  </div>
</div> -->

<!-- Image 3 -->
<!-- <div class="col-12 col-md-6 mb-3">
  <div class="card-body">
    <label for="input3">Upload Image 3:</label>
    <div class="text-center">
      <img src="" alt="Preview" id="imgView3" class="img-fluid mb-2">
    </div>
    <input class="form-control" type="file" name="images" id="input3" accept="image/png, image/jpeg, image/jpg">
    <div id="images-error3" class="error-message mt-2"></div>
  </div> -->
  <!-- Image Cropper -->
  <!-- <div class="image-cropper d-flex flex-column align-items-center">
    <div class="cropped-img-container"
         style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
      <img src="" id="croppedImg3" alt="Cropped Image" class="cropped-img img-fluid">
    </div>
    <button type="button" id="saveButton3" class="btn btn-sm btn-primary">crop</button>
  </div>
</div> -->
<!-- </div> -->




document.addEventListener("DOMContentLoaded", function() {
  const croppers = [];
  
  function handleImageUpload(inputId, imgViewId, croppedImgId, saveButtonId, cropperIndex) {
      const inputElement = document.getElementById(inputId);
      const imgView = document.getElementById(imgViewId);
      const croppedImg = document.getElementById(croppedImgId);
      const saveButton = document.getElementById(saveButtonId);
      const cropperContainer = document.getElementById('cropperImgContainer' + cropperIndex);

      inputElement.addEventListener("change", function(event) {
          const files = event.target.files;
          if (files && files.length > 0) {
              const reader = new FileReader();
              reader.onload = function(e) {
                  imgView.src = e.target.result;
                  imgView.style.display = "block";

                  if (croppers[cropperIndex]) {
                      croppers[cropperIndex].destroy();
                  }

                  croppers[cropperIndex] = new Cropper(imgView, {
                      aspectRatio: 1,
                      viewMode: 2,
                      preview: '.cropped-img-container img',
                      autoCropArea: 1,
                      movable: true,
                      scalable: true,
                      zoomable: true,
                      rotatable: true,
                      cropBoxResizable: true,
                      minCropBoxWidth: 200,
                      minCropBoxHeight: 200
                  });

                  cropperContainer.style.display = "flex";
              };
              reader.readAsDataURL(files[0]);
          }
      });

      saveButton.addEventListener("click", async function() {
        if (!croppers[cropperIndex]) {
              console.error(`Cropper instance ${cropperIndex} not found.`);
              return;
          }

        const croppedCanvas = croppers[cropperIndex].getCroppedCanvas();

        if (!croppedCanvas) {
              console.error(`Failed to get cropped canvas for cropper ${cropperIndex}.`);
              return;
          }

          const croppedImageURL = croppedCanvas.toDataURL('image/png');  
          croppedImg.src = croppedImageURL;
          croppedImg.style.display = "block";

          const blob = await new Promise((resolve) => {
              croppedCanvas.toBlob((blob) => {
                  console.log('Blob created:', blob);
                  resolve(blob);
              }, 'image/png');
          });

          if (!blob) {
              console.error(`Blob creation failed for cropper ${cropperIndex}.`);
              return;
          }

          // Create a File from the Blob and update the file input
          const file = new File([blob], `cropped-image-${cropperIndex}.png`, { type: 'image/png' });
          const dataTransfer = new DataTransfer();
          dataTransfer.items.add(file);
          document.getElementById(inputId).files = dataTransfer.files;

          // Prepare FormData
          const formData = new FormData();
          formData.append(inputId, file);

          // Include other form data if necessary
          // Example: formData.append('productName', document.getElementById('productName').value);

          fetch('/addproduct', {
            method: 'POST',
            body: formData
          })
          .then(response => response.json())
          .then(data => {
            console.log('Success:', data);
          })
          .catch(error => {
            console.error('Error:', error);
          });

          croppers[cropperIndex].destroy();
          croppers[cropperIndex] = null;
          imgView.style.display = "none";
          cropperContainer.style.display = "none";
      });
  }

  // Initialize handlers for each image input
  handleImageUpload('input1', 'imgView1', 'croppedImg1', 'saveButton1', 1);
  handleImageUpload('input2', 'imgView2', 'croppedImg2', 'saveButton2', 2);
  handleImageUpload('input3', 'imgView3', 'croppedImg3', 'saveButton3', 3);
});



  // validation code
document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('productForm');      
  function nameValidate() {
    const name = document.getElementsByName('name')[0].value.trim();
    const error1 = document.getElementById('productName-error');

    if (name === "") {
      error1.style.display = 'block';
      error1.innerHTML = 'Please enter a product name.';
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
      error1.style.display = 'block';
      error1.innerHTML = 'Product name should contain only alphabetic characters.';
    } else {
      error1.style.display = 'none';
      error1.innerHTML = '';
    }
  }

  function descriptionValidation() {
    const description = document.getElementById('descriptionid').value.trim();
    const error2 = document.getElementById('description-error');

    if (description === "") {
      error2.style.display = "block";
      error2.innerHTML = "Please enter a description.";
    } else if (description.length < 1) {
      error2.style.display = "block";
      error2.innerHTML = "Description should be at least 50 characters.";
    } else {
      error2.style.display = "none";
      error2.innerHTML = '';
    }
  }

  function priceValidation() {
    const price = document.getElementsByName('price')[0].value.trim();
    const error3 = document.getElementById('regularPrice-error');

    if (price === "") {
      error3.style.display = "block";
      error3.innerHTML = "Please enter a price.";
    } else if (!/^\₹?\d+(\.\d{2})?$/.test(price)) {
      error3.style.display = "block";
      error3.innerHTML = "Invalid price format. Please use ₹XX.XX";
    } else {
      error3.style.display = "none";
      error3.innerHTML = '';
    }
  }

  function offerValidation() {
    const offer = document.getElementsByName('Offerprice')[0].value.trim();
    const error4 = document.getElementById('salePrice-error');

    if (offer === "") {
      error4.style.display = "block";
      error4.innerHTML = "Please enter an offer price.";
    } else if (!/^\₹?\d+(\.\d{2})?$/.test(offer)) {
      error4.style.display = "block";
      error4.innerHTML = "Invalid offer price format. Please use ₹XX.XX";
    } else {
      error4.style.display = "none";
      error4.innerHTML = '';
    }
  }

  function quantityValidation() {
    const quantity = document.getElementById('quantity').value.trim();
    const error5 = document.getElementById('quantity-error');

    if (quantity === "") {
      error5.style.display = 'block';
      error5.innerHTML = 'Please enter the quantity.';
    } else if (!/^\d+$/.test(quantity)) {
      error5.style.display = 'block';
      error5.innerHTML = 'Quantity should be a positive number.';
    } else {
      error5.style.display = 'none';
      error5.innerHTML = '';
    }
  }

  function categoryValidation() {
    const category = document.getElementById('category').value;
    const error6 = document.getElementById('category-error');

    if (category === "") {
      error6.style.display = 'block';
      error6.innerHTML = 'Please select a category.';
    } else {
      error6.style.display = 'none';
      error6.innerHTML = '';
    }
  }

  function colorValidation() {
    const color = document.getElementById('color').value.trim();
    const error7 = document.getElementById('color-error');

    if (color === "") {
      error7.style.display = 'block';
      error7.innerHTML = 'Please enter a color.';
    } else {
      error7.style.display = 'none';
      error7.innerHTML = '';
    }
  }
  function validateImages() {
    const imageInputs = document.querySelectorAll('input[type="file"][name="images"]');
    let isValid = true;
    
    imageInputs.forEach((input, index) => {
      const imageErrorElement = document.getElementById(`images-error`);
      
      if (input.files.length === 0) {
        imageErrorElement.style.display = 'block';
        imageErrorElement.innerHTML = 'Please select an images.';
        isValid = false;
      } else {
        imageErrorElement.style.display = 'none';
        imageErrorElement.innerHTML = '';
      }
    });
    
    return isValid;
  }
  

  form.addEventListener('submit', (e) => {
    nameValidate();
    descriptionValidation();
    priceValidation();
    offerValidation();
    quantityValidation();
    categoryValidation();
    colorValidation();
    const imagesValid = validateImages();

    // Prevent form submission if there are errors
    if (document.getElementById('productName-error').style.display === 'block' || 
        document.getElementById('description-error').style.display === 'block' ||
        document.getElementById('regularPrice-error').style.display === 'block' ||
        document.getElementById('salePrice-error').style.display === 'block' ||
        document.getElementById('quantity-error').style.display === 'block' ||
        document.getElementById('category-error').style.display === 'block' ||
        document.getElementById('color-error').style.display === 'block'||
        !imagesValid) {
      e.preventDefault();
    }
  });
});

</script>


<!-- edit -->
 <%- include('../adminlayouts/header') %>
<head>
  <!-- <link href="./node_modules/cropperjs/dist/cropper.min.css" rel="stylesheet"> -->

</head>
<style>
  input[type="text"],
  input[type="number"],
  textarea {
    width: 75%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    box-sizing: border-box;
  }

  .main-panel {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  .content-wrapper {
    flex: 1;
  }

  .back-button {
    color: white;
    background-color: #1cc0a0;
    border: none;
    padding: 10px 20px;
    text-decoration: none;
    border-radius: 5px;
  }

  .back-button:hover {
    background-color: white;
    color: #1cc0a0;
    border: 1px solid #1cc0a0;
  }

  .sub-btn {
    color: white;
    background-color: #1cc0a0;
    border: none;
    border-radius: 5px;
    padding: 10px 20px;
  }

  .sub-btn:hover {
    background-color: white;
    color: #1cc0a0;
    border: 1px solid #1cc0a0;
  }

  .header-flex {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .form-section {
    margin-bottom: 20px;
  }

  .form-label {
    margin-bottom: 10px;
  }
  input[type="file"] {
    width: 400px;       
    padding: 15px;      
    font-size: 12px; 
    border-radius: 5px;  
    border: 1px solid #ccc; 
    background-color: #fdfcfc; 
}

input[type="file"]::-webkit-file-upload-button {
    padding: 5px; 
    font-size: 12px; 
}

input[type="file"]::-ms-browse {
    padding: 5px; 
    font-size: 12px; 
}

input[type="file"]::-webkit-file-upload-text {
    padding: 5px; 
    font-size: 12px; 
}

.error-message{
  color: red;
  font-size: 12px;
}
.image-cropper {
  display: none;
  flex-direction: column;
  align-items: center;
} 

 .img-fluid {
  max-width: 100%;
  height: auto;
} 

.cropped-img-container {
  width: 200px;
  height: 200px;
  background-color: #f8f9fa;
  margin-bottom: 10px;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
/* display: none; */
}
.cropped-img {
  width: 100%;
 height: 100%;
  object-fit:contain; 
  display: block;
}


.btn-sm {
  width: 80px;
}
.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5); /* Transparent background */
  justify-content: center;
  align-items: center;
  /* z-index: 1000; Ensures the modal appears on top */
}

.modal-content {
  background: #faf9f9;
  padding: 20px;
  border-radius: 5px;
  width: 90%;
  max-width: 600px;
  max-height: 80%;
  overflow: hidden;
  position: relative;
  margin: auto;
}

#image {
    max-width: 100%;
    max-height: 80vh; /* To limit the height within the viewport */
    display: block;
}

/* Media Query for Smaller Screens */
@media (max-width: 768px) {
  .modal-content {
    width: 95%;
    max-width: 90%;
    padding: 15px;
  }

  #image {
    max-height: 50vh;
  }
}

@media (max-width: 480px) {
  .modal-content {
    width: 100%;
    max-width: 100%;
    padding: 10px;
    border-radius: 0;
  }

  #image {
    max-height: 200px;
  }
}



</style>
<body>
  

<div class="main-panel">
  <div class="content-wrapper">
    <div class="col-lg-12 grid-margin stretch-card">
      <div class="card">
        <div class="card-body">
          <div class="mb-3 d-flex justify-content-between">
            <h3 class="card-title fs-5 mb-0">Edit Product</h3>
            <a href="/admin/product" class="back-button btn btn-primary float-right">Back to Product</a>
          </div>
          

          <% if (product) { %>
            <form id="productForm" method="POST" action="/admin/editproduct/<%= product._id %>" enctype="multipart/form-data">
                <div class="row form-section">
                    <div class="col-lg-6 mb-4">
                      <label for="product_name" class="form-label">Product Name</label>
                      <input type="text" placeholder="Type here" name="name" class="form-control border" id="product_name" value="<%=product.name%>">
                      <div id="productName-error" class="error-message" style="display:none; color:red;"></div>
                    </div>
                    
                    <div class="col-lg-4 mb-4">
                      <div class="col-lg-6 mb-4 ">
                        <label class="form-label">Category</label>
                      <select class="form-select border" style="width: 350px; " name="category" id="category" >
                          <option value="">Select Category</option>
                          <% for(let i=0;i<category.length;i++){ %>
                            <option value="<%= category[i].name%>"><%= category[i].name %></option>
                          <% } %>
                        </select>
                        <div id="category-error" class="error-message"></div>
                      </div>
                    </div>
      
                  <div class="row form-section">
                    <div class="col-lg-4 mb-4">
                      <label class="form-label"> Price</label>
                      <input placeholder="₹" name="price" type="text" class="form-control border"value="<%=product.price%>">
                      <div id="regularPrice-error" class="error-message"></div>
                    </div>
                    
                    <div class="col-lg-4 mb-4">
                      <label class="form-label">Offer Price</label>
                      <input placeholder="₹" name="offerprice" type="text" class="form-control border" value="<%=product.offerprice%>">
                      <div id="salePrice-error" class="error-message"></div>
                    </div>
                    
                    <div class="col-lg-4 mb-4">
                      <label class="form-label">Quantity</label>
                      <input placeholder="Product Quantity" name="quantity" type="number" class="form-control border " id="quantity" value="<%=product.quantity%>">
                      <div id="quantity-error" class="error-message"></div>
                    </div>
                  </div>
      
      
                  <div class="row form-section">
                    <label class="form-label">Full Description</label>
                    <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control borde  w-50"  rows="4"  value="<%=product.description%>"></textarea>
                    <div id="description-error" class="error-message" style="display:none; color:red;"></div>
                  </div>
                
                    
                    <div class="col-lg-6 mb-4">
                      <label class="form-label">Color</label>
                      <input name="color" type="text" class="form-control border w-50" id="color" value="<%=product.color%>">
                      <div id="color-error" class="error-message"></div>
                    </div>
                  </div>
      
                  <div class="card mb-2">
                    <div class="card-header">
                        <h4>Choose images</h4>
                    </div>
                   <% for(let i=0;i<product.productImage.length;i++) {%>
      <div class="col-12 col-md-6 mb-3">
        <div class="card-body">
          <label for="input">Upload Image 1:</label>
          <div class="text-center">
            <img  id="imgView1" class="img-fluid mb-2">
      
          </div>
          <input class="form-control" type="file"  id="input1" name="images" accept="image/png, image/jpeg, image/jpg" >
          <div id="images-error1" class="error-message mt-2"></div>
        </div>
        <% } %>
        <!-- Image Cropper -->
        <div class="image-cropper d-flex flex-column align-items-center">
          <div id="croppedImgContainer1" class="cropped-img-container" style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
            <img src="/public/uploads/<%=product.productImage[i]%>" id="croppedImg1" alt="Cropped Image" class="cropped-img img-fluid">
        </div>
        
          <button type="button" id="saveButton1" class="btn btn-sm btn-primary">crop</button>
        </div>
      </div>
      
      
       <!-- Image 2 -->
       <div class="col-12 col-md-6 mb-3">
        <div class="card-body">
          <label for="input">Upload Image 2:</label>
          <div class="text-center">
            <img src=""  id="imgView2" class="img-fluid mb-2">
          </div>
          <input class="form-control" type="file"  id="input2"  name="images"accept="image/png, image/jpeg, image/jpg">
          <div id="images-error1" class="error-message mt-2"></div>
        </div>
        <!-- Image Cropper -->
        <div class="image-cropper d-flex flex-column align-items-center">
          <div id="croppedImgContainer2" class="cropped-img-container" style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
      
            <img src="/public/uploads/<%=product.productImage[i]%>" id="croppedImg2" alt="Cropped Image" class="cropped-img img-fluid">
          </div>
          <button type="button" id="saveButton2" class="btn btn-sm btn-primary">crop</button>
        </div>
      </div>
      
      <!-- Image 3 -->
      <div class="col-12 col-md-6 mb-3">
        <div class="card-body">  
          <label for="input">Upload Image 3:</label>
          <div class="text-center">
            <img src=""  id="imgView3" class="img-fluid mb-2">
          </div>
          <input class="form-control" type="file"  id="input3" name="images" accept="image/png, image/jpeg, image/jpg">
          <div id="images-error3" class="error-message mt-2"></div>
        </div>
        <!-- Image Cropper -->
        <div class="image-cropper d-flex flex-column align-items-center">
          <div id="croppedImgContainer3" class="cropped-img-container" style="width: 200px; height: 200px; background-color: #f8f9fa; margin-bottom: 10px; display: flex; justify-content: center; align-items: center;">
            <img src="/public/uploads/<%=product.productImage[i]%>"  id="croppedImg3"alt="Cropped Image" class="cropped-img img-fluid">
          </div>
          <button type="button" id="saveButton3" class="btn btn-sm btn-primary">crop</button>
        </div>
      <!-- </div> -->
      <!-- </div> -->
                    
       
      </div> <!--card end-->
                  <div class="form-section">
                    <% if (typeof message !== 'undefined' && message) { %>
                      <div class="alert alert-info msg text-center ">
                          <%= message %>
                      </div>
                  <% } %>
                    <button class="btn btn-md rounded sub-btn"  id="pulish"  type="submit">Submit Product</button>
                  </div>
            </form>
          <% } else { %>
            <p>Product not found.</p>
          <% } %>
                    
          
        </div>
      </div>
    </div>
  </div>

 

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<!-- <script src="./node_modules/cropperjs/dist/cropper.min.js"></script> -->

<script>
document.addEventListener("DOMContentLoaded", function() {
  const croppers = [];

  function validateForm() {
    let isValid = true;

    document.querySelectorAll('.error-message').forEach(el => el.style.display = 'none');

    // Validate Product Name
    const productName = document.getElementById('product_name').value.trim();
    if (productName === '') {
      document.getElementById('productName-error').textContent = 'Product name is required.';
      document.getElementById('productName-error').style.display = 'block';
      isValid = false;
    }

    // Validate Category
    const category = document.getElementById('category').value.trim();
    if (category === '') {
      document.getElementById('category-error').textContent = 'Category is required.';
      document.getElementById('category-error').style.display = 'block';
      isValid = false;
    }

    // Validate Regular Price
    const regularPrice = document.querySelector('input[name="price"]').value.trim();
    if (regularPrice === '' || isNaN(regularPrice) || parseFloat(regularPrice) <= 0) {
      document.getElementById('regularPrice-error').textContent = 'Price is required.';
      document.getElementById('regularPrice-error').style.display = 'block';
      isValid = false;
    }

    // Validate Sale Price
    const salePrice = document.querySelector('input[name="offerprice"]').value.trim();
    if (salePrice === '' || isNaN(salePrice) || parseFloat(salePrice) < 0) {
      document.getElementById('salePrice-error').textContent = 'Offer price is required.';
      document.getElementById('salePrice-error').style.display = 'block';
      isValid = false;
    }

    // Validate Quantity
    const quantity = document.getElementById('quantity').value.trim();
    if (quantity === '' || isNaN(quantity) || parseInt(quantity) <= 0) {
      document.getElementById('quantity-error').textContent = 'Quantity is required.';
      document.getElementById('quantity-error').style.display = 'block';
      isValid = false;
    }

    // Validate Description
    const description = document.getElementById('descriptionid').value.trim();
    if (description === '') {
      document.getElementById('description-error').textContent = 'Description is required.';
      document.getElementById('description-error').style.display = 'block';
      isValid = false;
    }

    // Validate Color
    const color = document.getElementById('color').value.trim();
    if (color === '') {
      document.getElementById('color-error').textContent = 'Color is required.';
      document.getElementById('color-error').style.display = 'block';
      isValid = false;
    }

    // Validate Images
    const imageInputs = document.querySelectorAll('input[type="file"][name="images"]');
    let imageValid = false;
    imageInputs.forEach(input => {
      if (input.files.length > 0) {
        imageValid = true;
      }
    });
    if (!imageValid) {
      document.getElementById('images-error').textContent = 'Image is required';
      document.getElementById('images-error').style.display = 'block';
      isValid = false;
    }

    return isValid;
  }

  function handleImageUpload(inputId, imgViewId, croppedImgId, saveButtonId, cropperIndex) {
    const inputElement = document.getElementById(inputId);
    const imgView = document.getElementById(imgViewId);
    const croppedImg = document.getElementById(croppedImgId);
    const saveButton = document.getElementById(saveButtonId);
    const cropperContainer = document.getElementById('croppedImgContainer' + cropperIndex);

    inputElement.addEventListener("change", function(event) {
      const files = event.target.files;
      if (files && files.length > 0) {
        const reader = new FileReader();
        reader.onload = function(e) {
          imgView.src = e.target.result;
          imgView.style.display = "block";

          if (croppers[cropperIndex]) {
            croppers[cropperIndex].destroy();
          }

          croppers[cropperIndex] = new Cropper(imgView, {
            aspectRatio: 1,
            viewMode: 2,
            preview: '.cropped-img-container img',
            autoCropArea: 1,
            movable: true,
            scalable: true,
            zoomable: true,
            rotatable: true,
            cropBoxResizable: true,
            minCropBoxWidth: 200,
            minCropBoxHeight: 200
          });

          cropperContainer.style.display = "flex";
        };
        reader.readAsDataURL(files[0]);
      }
    });

    saveButton.addEventListener("click", async function() {
    

      const croppedCanvas = croppers[cropperIndex].getCroppedCanvas();

      

      const croppedImageURL = croppedCanvas.toDataURL('image/png');  
      croppedImg.src = croppedImageURL;
      croppedImg.style.display = "block"
      
      const blob = await new Promise((resolve) => {
        croppedCanvas.toBlob((blob) => {
          console.log('Blob created:', blob);
          resolve(blob);
        }, 'image/png');
      });

      const file = new File([blob], `cropped-image-${cropperIndex}.png`, { type: 'image/png' });
      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(file);
      document.getElementById(inputId).files = dataTransfer.files;

      croppers[cropperIndex].destroy();
      croppers[cropperIndex] = null;
      imgView.style.display = "none";
    });
  }

  handleImageUpload('input1', 'imgView1', 'croppedImg1', 'saveButton1', 1);
  handleImageUpload('input2', 'imgView2', 'croppedImg2', 'saveButton2', 2);
  handleImageUpload('input3', 'imgView3', 'croppedImg3', 'saveButton3', 3);

  document.getElementById('productForm').addEventListener('submit', function(event) {
    event.preventDefault();

    if (validateForm()) {
      const formData = new FormData(this);

      fetch('/admin/editproduct/<%=product._id%>', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        console.log('Success:', data);

        Swal.fire({
          icon: 'success',
          title: 'Product Added',
          text: 'The product was added successfully!',
          confirmButtonText: 'OK'
        }).then(()=>{
          location.reload();
        })

      })
      .catch(error => {
        console.error('Error:', error);

        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Something went wrong!',
          confirmButtonText: 'OK'
        });
      });
    }
  });
});


// delete image
// function deleteSingleImage (imageId,productId){
//     fetch({'/admin/deleteImage',
//     method:'POST',
    

//     })
// }



 </script>
 <%- include('../adminlayouts/footer') %>
</div>

</body>